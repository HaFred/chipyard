;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.11, sbtVersion: 1.3.2
circuit nonToeplitzProcessingElement : 
  module ProcessingElementControl : 
    input clock : Clock
    input reset : Reset
    output io : {ctrlPad : {doMACEn : UInt<1>, flip fromTopIO : {flip pSumEnqEn : UInt<1>, flip doLoadEn : UInt<1>, writeFinish : UInt<1>, calFinish : UInt<1>}}, ctrlTop : {flip pSumEnqEn : UInt<1>, flip doLoadEn : UInt<1>, calFinish : UInt<1>, flip writeFinish : UInt<1>}, debugIO : {peState : UInt<2>, doMACEnDebug : UInt<1>}}
    
    reg PEStateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ProcessingElement.scala 75:41]
    node _T = eq(PEStateReg, UInt<2>("h02")) @[ProcessingElement.scala 78:70]
    node _T_1 = and(io.ctrlPad.fromTopIO.calFinish, _T) @[ProcessingElement.scala 78:58]
    io.ctrlTop.calFinish <= _T_1 @[ProcessingElement.scala 78:24]
    io.ctrlPad.fromTopIO.pSumEnqEn <= io.ctrlTop.pSumEnqEn @[ProcessingElement.scala 79:34]
    io.ctrlPad.fromTopIO.doLoadEn <= io.ctrlTop.doLoadEn @[ProcessingElement.scala 80:33]
    node _T_2 = eq(PEStateReg, UInt<2>("h02")) @[ProcessingElement.scala 81:34]
    io.ctrlPad.doMACEn <= _T_2 @[ProcessingElement.scala 81:22]
    node _T_3 = eq(UInt<2>("h00"), PEStateReg) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      when io.ctrlTop.doLoadEn : @[ProcessingElement.scala 84:34]
        PEStateReg <= UInt<2>("h01") @[ProcessingElement.scala 85:18]
        skip @[ProcessingElement.scala 84:34]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<2>("h01"), PEStateReg) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        when io.ctrlTop.writeFinish : @[ProcessingElement.scala 89:37]
          PEStateReg <= UInt<2>("h02") @[ProcessingElement.scala 90:18]
          skip @[ProcessingElement.scala 89:37]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<2>("h02"), PEStateReg) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          when io.ctrlPad.fromTopIO.calFinish : @[ProcessingElement.scala 94:45]
            PEStateReg <= UInt<2>("h00") @[ProcessingElement.scala 95:18]
            skip @[ProcessingElement.scala 94:45]
          skip @[Conditional.scala 39:67]
    io.debugIO.peState <= PEStateReg @[ProcessingElement.scala 100:24]
    io.debugIO.doMACEnDebug <= io.ctrlPad.doMACEn @[ProcessingElement.scala 101:29]
    
  module PSumSPad : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {flip ipsIO : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, opsIO : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}}, ctrlPath : {flip readIdx : UInt<5>, flip writeIdx : UInt<5>}}
    
    wire _T : UInt<21>[32] @[SPadModule.scala 211:61]
    _T[0] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[1] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[2] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[3] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[4] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[5] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[6] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[7] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[8] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[9] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[10] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[11] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[12] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[13] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[14] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[15] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[16] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[17] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[18] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[19] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[20] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[21] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[22] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[23] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[24] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[25] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[26] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[27] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[28] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[29] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[30] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    _T[31] <= UInt<21>("h00") @[SPadModule.scala 211:61]
    reg pSumDataSPadReg : UInt<21>[32], clock with : (reset => (reset, _T)) @[SPadModule.scala 211:53]
    wire readOutDataWire : UInt<21> @[SPadModule.scala 213:39]
    readOutDataWire <= pSumDataSPadReg[io.ctrlPath.readIdx] @[SPadModule.scala 214:19]
    node _T_1 = eq(io.dataPath.opsIO.ready, UInt<1>("h00")) @[SPadModule.scala 215:30]
    io.dataPath.ipsIO.ready <= _T_1 @[SPadModule.scala 215:27]
    node _T_2 = eq(io.dataPath.ipsIO.valid, UInt<1>("h00")) @[SPadModule.scala 216:30]
    io.dataPath.opsIO.valid <= _T_2 @[SPadModule.scala 216:27]
    io.dataPath.opsIO.bits <= readOutDataWire @[SPadModule.scala 217:26]
    node _T_3 = and(io.dataPath.ipsIO.ready, io.dataPath.ipsIO.valid) @[Decoupled.scala 40:37]
    when _T_3 : @[SPadModule.scala 218:35]
      pSumDataSPadReg[io.ctrlPath.writeIdx] <= io.dataPath.ipsIO.bits @[SPadModule.scala 219:43]
      skip @[SPadModule.scala 218:35]
    
  module SPadDataModule : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {columnNum : UInt<4>, readOutData : UInt<7>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<4>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<7> @[SPadModule.scala 182:38]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 183:49]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 184:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 185:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 186:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 187:42]
    wire writeFire : UInt<1> @[SPadModule.scala 188:39]
    node _T = and(io.dataPath.writeInData.data.ready, io.dataPath.writeInData.data.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 189:39]
    writeFire <= _T_1 @[SPadModule.scala 189:13]
    node _T_2 = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 190:41]
    node _T_3 = and(_T_2, writeFire) @[SPadModule.scala 190:49]
    writeWrapWire <= _T_3 @[SPadModule.scala 190:17]
    node _T_4 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 191:28]
    node _T_5 = and(_T_4, readIndexInc) @[SPadModule.scala 191:36]
    readWrapWire <= _T_5 @[SPadModule.scala 191:16]
    io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 193:25]
    node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 194:79]
    node _T_7 = tail(_T_6, 1) @[SPadModule.scala 194:79]
    node _T_8 = mux(writeWrapWire, UInt<1>("h00"), _T_7) @[SPadModule.scala 194:41]
    node _T_9 = mux(writeFire, _T_8, padWriteIndexReg) @[SPadModule.scala 194:26]
    padWriteIndexReg <= _T_9 @[SPadModule.scala 194:20]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 196:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 197:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 198:25]
    wire _T_10 : UInt<7>[9] @[SPadModule.scala 165:46]
    _T_10[0] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[1] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[2] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[3] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[4] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[5] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[6] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[7] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    _T_10[8] <= UInt<7>("h00") @[SPadModule.scala 165:46]
    reg dataSPadReg : UInt<7>[9], clock with : (reset => (reset, _T_10)) @[SPadModule.scala 165:38]
    when writeFire : @[SPadModule.scala 167:22]
      dataSPadReg[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 168:34]
      skip @[SPadModule.scala 167:22]
    when readIndexInc : @[SPadModule.scala 200:25]
      node _T_11 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 201:42]
      node _T_12 = tail(_T_11, 1) @[SPadModule.scala 201:42]
      padReadIndexReg <= _T_12 @[SPadModule.scala 201:23]
      when readWrapWire : @[SPadModule.scala 202:27]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 203:25]
        skip @[SPadModule.scala 202:27]
      skip @[SPadModule.scala 200:25]
    dataWire <= dataSPadReg[padReadIndexReg] @[SPadModule.scala 173:14]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 175:16]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 176:27]
    
  module nonTpActSPadDataModule : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {columnNum : UInt<6>, readOutData : UInt<12>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}, flip currentSliding : UInt<1>, slidingBoxUB : UInt<4>, slidingBoxLB : UInt<4>, futureLBStart : UInt<4>}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<6>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<6>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>, slidingInc : UInt<1>, flip inActColInc : UInt<1>, flip weightIdxInc : UInt<1>, flip padEqMpyBool : UInt<1>, flip mightWeightZeroColumn : UInt<1>, flip padEqWABool : UInt<1>, flip padEqIDBool : UInt<1>, inActReadIdxBeyondUB : UInt<1>, inActLastNonZeroEle : UInt<1>}}
    
    wire dataWire : UInt<12> @[SPadModule.scala 10:38]
    reg padWriteIndexReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[SPadModule.scala 11:49]
    reg padReadIndexReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[SPadModule.scala 12:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 13:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 14:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 15:42]
    wire writeFire : UInt<1> @[SPadModule.scala 16:39]
    reg readSlidingInc : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SPadModule.scala 18:47]
    wire currentSlidingWire : UInt<1> @[SPadModule.scala 19:48]
    reg inActDataLB : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 20:44]
    reg inActDataUB : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 21:44]
    reg futureInActDataLB : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 22:50]
    wire _T : UInt<12>[64] @[SPadModule.scala 23:54]
    _T[0] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[1] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[2] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[3] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[4] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[5] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[6] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[7] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[8] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[9] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[10] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[11] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[12] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[13] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[14] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[15] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[16] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[17] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[18] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[19] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[20] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[21] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[22] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[23] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[24] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[25] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[26] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[27] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[28] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[29] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[30] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[31] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[32] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[33] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[34] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[35] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[36] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[37] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[38] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[39] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[40] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[41] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[42] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[43] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[44] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[45] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[46] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[47] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[48] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[49] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[50] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[51] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[52] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[53] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[54] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[55] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[56] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[57] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[58] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[59] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[60] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[61] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[62] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    _T[63] <= UInt<12>("h00") @[SPadModule.scala 23:54]
    reg dataSPadReg : UInt<12>[64], clock with : (reset => (reset, _T)) @[SPadModule.scala 23:46]
    reg currentColTopIdxReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 25:52]
    reg futureLBStartReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 27:49]
    wire inActColIncWire : UInt<1> @[SPadModule.scala 28:45]
    wire weightIdxIncWire : UInt<1> @[SPadModule.scala 29:46]
    wire padEqMpy : UInt<1> @[SPadModule.scala 30:37]
    wire padEqWA : UInt<1> @[SPadModule.scala 31:36]
    wire padEqID : UInt<1> @[SPadModule.scala 32:36]
    reg currentCountAtFutureLB : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SPadModule.scala 33:55]
    reg lastCountNotAtFutureLB : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SPadModule.scala 34:55]
    wire mightWeightZeroColumn : UInt<1> @[SPadModule.scala 35:50]
    wire inActAdrReadInIdxWire : UInt<7> @[SPadModule.scala 36:51]
    reg lastInActAdrDataReg : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[SPadModule.scala 37:52]
    wire inActAdrLastReadInIdxWire : UInt<7> @[SPadModule.scala 38:55]
    wire futureLBStartRegChange : UInt<1> @[SPadModule.scala 39:52]
    wire inActReadIdxBeyondUB : UInt<1> @[SPadModule.scala 40:50]
    wire inActLastNonZeroEle : UInt<1> @[SPadModule.scala 41:48]
    node _T_1 = and(io.dataPath.writeInData.data.ready, io.dataPath.writeInData.data.valid) @[Decoupled.scala 40:37]
    node _T_2 = and(_T_1, io.ctrlPath.writeEn) @[SPadModule.scala 43:39]
    writeFire <= _T_2 @[SPadModule.scala 43:13]
    node _T_3 = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 44:41]
    node _T_4 = and(_T_3, writeFire) @[SPadModule.scala 44:49]
    writeWrapWire <= _T_4 @[SPadModule.scala 44:17]
    node _T_5 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 45:29]
    node _T_6 = div(UInt<2>("h02"), UInt<1>("h01")) @[SPadModule.scala 45:70]
    node _T_7 = sub(_T_6, UInt<1>("h01")) @[SPadModule.scala 45:76]
    node _T_8 = tail(_T_7, 1) @[SPadModule.scala 45:76]
    node _T_9 = eq(currentSlidingWire, _T_8) @[SPadModule.scala 45:61]
    node _T_10 = and(_T_5, _T_9) @[SPadModule.scala 45:38]
    readWrapWire <= _T_10 @[SPadModule.scala 45:16]
    io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 47:25]
    node _T_11 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 48:79]
    node _T_12 = tail(_T_11, 1) @[SPadModule.scala 48:79]
    node _T_13 = mux(writeWrapWire, UInt<1>("h00"), _T_12) @[SPadModule.scala 48:41]
    node _T_14 = mux(writeFire, _T_13, padWriteIndexReg) @[SPadModule.scala 48:26]
    padWriteIndexReg <= _T_14 @[SPadModule.scala 48:20]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 51:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 52:24]
    inActAdrReadInIdxWire <= io.ctrlPath.readInIdx @[SPadModule.scala 53:25]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 54:25]
    io.dataPath.slidingBoxLB <= inActDataLB @[SPadModule.scala 55:28]
    io.dataPath.slidingBoxUB <= inActDataUB @[SPadModule.scala 56:28]
    io.dataPath.futureLBStart <= futureLBStartReg @[SPadModule.scala 57:29]
    inActColIncWire <= io.ctrlPath.inActColInc @[SPadModule.scala 58:19]
    weightIdxIncWire <= io.ctrlPath.weightIdxInc @[SPadModule.scala 59:20]
    currentSlidingWire <= io.dataPath.currentSliding @[SPadModule.scala 60:22]
    mightWeightZeroColumn <= io.ctrlPath.mightWeightZeroColumn @[SPadModule.scala 61:25]
    node _T_15 = mul(currentSlidingWire, UInt<1>("h01")) @[SPadModule.scala 62:37]
    node _T_16 = mul(_T_15, UInt<2>("h02")) @[SPadModule.scala 62:43]
    inActDataLB <= _T_16 @[SPadModule.scala 62:15]
    node _T_17 = mul(currentSlidingWire, UInt<1>("h01")) @[SPadModule.scala 63:37]
    node _T_18 = mul(_T_17, UInt<2>("h02")) @[SPadModule.scala 63:43]
    node _T_19 = mul(UInt<2>("h02"), UInt<3>("h04")) @[SPadModule.scala 63:57]
    node _T_20 = add(_T_18, _T_19) @[SPadModule.scala 63:50]
    node _T_21 = tail(_T_20, 1) @[SPadModule.scala 63:50]
    node _T_22 = sub(_T_21, UInt<1>("h01")) @[SPadModule.scala 63:63]
    node _T_23 = tail(_T_22, 1) @[SPadModule.scala 63:63]
    inActDataUB <= _T_23 @[SPadModule.scala 63:15]
    node _T_24 = add(currentSlidingWire, UInt<1>("h01")) @[SPadModule.scala 64:44]
    node _T_25 = tail(_T_24, 1) @[SPadModule.scala 64:44]
    node _T_26 = mul(_T_25, UInt<1>("h01")) @[SPadModule.scala 64:51]
    node _T_27 = mul(_T_26, UInt<2>("h02")) @[SPadModule.scala 64:57]
    futureInActDataLB <= _T_27 @[SPadModule.scala 64:21]
    padEqMpy <= io.ctrlPath.padEqMpyBool @[SPadModule.scala 65:12]
    padEqWA <= io.ctrlPath.padEqWABool @[SPadModule.scala 66:11]
    padEqID <= io.ctrlPath.padEqIDBool @[SPadModule.scala 67:11]
    node _T_28 = eq(futureLBStartReg, padReadIndexReg) @[SPadModule.scala 68:46]
    futureLBStartRegChange <= _T_28 @[SPadModule.scala 68:26]
    io.ctrlPath.inActReadIdxBeyondUB <= inActReadIdxBeyondUB @[SPadModule.scala 69:36]
    io.ctrlPath.inActLastNonZeroEle <= inActLastNonZeroEle @[SPadModule.scala 70:35]
    node _T_29 = bits(dataSPadReg[padReadIndexReg], 3, 0) @[SPadModule.scala 116:30]
    node _T_30 = geq(_T_29, futureInActDataLB) @[SPadModule.scala 73:56]
    currentCountAtFutureLB <= _T_30 @[SPadModule.scala 73:26]
    node _T_31 = sub(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 74:55]
    node _T_32 = tail(_T_31, 1) @[SPadModule.scala 74:55]
    node _T_33 = bits(dataSPadReg[_T_32], 3, 0) @[SPadModule.scala 74:61]
    node _T_34 = lt(_T_33, futureInActDataLB) @[SPadModule.scala 74:84]
    node _T_35 = eq(padReadIndexReg, UInt<1>("h00")) @[SPadModule.scala 74:125]
    node _T_36 = or(_T_34, _T_35) @[SPadModule.scala 74:105]
    node _T_37 = eq(padReadIndexReg, inActAdrLastReadInIdxWire) @[SPadModule.scala 75:22]
    node _T_38 = or(_T_36, _T_37) @[SPadModule.scala 74:134]
    lastCountNotAtFutureLB <= _T_38 @[SPadModule.scala 74:26]
    node _T_39 = and(padEqMpy, weightIdxIncWire) @[SPadModule.scala 83:32]
    node _T_40 = eq(inActColIncWire, UInt<1>("h00")) @[SPadModule.scala 83:56]
    node _T_41 = and(_T_39, _T_40) @[SPadModule.scala 83:52]
    node _T_42 = and(padEqWA, mightWeightZeroColumn) @[SPadModule.scala 83:87]
    node _T_43 = or(_T_41, _T_42) @[SPadModule.scala 83:75]
    node _T_44 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 84:34]
    node _T_45 = tail(_T_44, 1) @[SPadModule.scala 84:34]
    node _T_46 = bits(dataSPadReg[_T_45], 3, 0) @[SPadModule.scala 84:40]
    node _T_47 = gt(_T_46, inActDataUB) @[SPadModule.scala 84:63]
    node _T_48 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 84:98]
    node _T_49 = tail(_T_48, 1) @[SPadModule.scala 84:98]
    node _T_50 = lt(_T_49, inActAdrReadInIdxWire) @[SPadModule.scala 84:104]
    node _T_51 = and(_T_47, _T_50) @[SPadModule.scala 84:78]
    node _T_52 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 85:24]
    node _T_53 = tail(_T_52, 1) @[SPadModule.scala 85:24]
    node _T_54 = eq(_T_53, inActAdrReadInIdxWire) @[SPadModule.scala 85:30]
    node _T_55 = or(_T_51, _T_54) @[SPadModule.scala 84:130]
    node _T_56 = sub(UInt<2>("h02"), UInt<1>("h01")) @[SPadModule.scala 86:35]
    node _T_57 = tail(_T_56, 1) @[SPadModule.scala 86:35]
    node _T_58 = neq(currentSlidingWire, _T_57) @[SPadModule.scala 86:27]
    node _T_59 = and(_T_55, _T_58) @[SPadModule.scala 85:58]
    node _T_60 = and(_T_43, _T_59) @[SPadModule.scala 83:114]
    readSlidingInc <= _T_60 @[SPadModule.scala 83:18]
    io.ctrlPath.slidingInc <= readSlidingInc @[SPadModule.scala 88:26]
    inActAdrLastReadInIdxWire <= lastInActAdrDataReg @[SPadModule.scala 89:29]
    node _T_61 = bits(dataSPadReg[padReadIndexReg], 3, 0) @[SPadModule.scala 116:30]
    node _T_62 = gt(_T_61, inActDataUB) @[SPadModule.scala 90:54]
    inActReadIdxBeyondUB <= _T_62 @[SPadModule.scala 90:24]
    node _T_63 = eq(padReadIndexReg, UInt<4>("h0c")) @[SPadModule.scala 91:42]
    inActLastNonZeroEle <= _T_63 @[SPadModule.scala 91:23]
    when futureLBStartRegChange : @[SPadModule.scala 93:31]
      lastInActAdrDataReg <= inActAdrReadInIdxWire @[SPadModule.scala 94:25]
      skip @[SPadModule.scala 93:31]
    when writeFire : @[SPadModule.scala 97:19]
      dataSPadReg[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 98:32]
      skip @[SPadModule.scala 97:19]
    when readIndexInc : @[SPadModule.scala 101:23]
      when readSlidingInc : @[SPadModule.scala 102:27]
        padReadIndexReg <= futureLBStartReg @[SPadModule.scala 103:24]
        skip @[SPadModule.scala 102:27]
      else : @[SPadModule.scala 104:19]
        node _T_64 = and(currentCountAtFutureLB, lastCountNotAtFutureLB) @[SPadModule.scala 105:36]
        when _T_64 : @[SPadModule.scala 105:63]
          futureLBStartReg <= padReadIndexReg @[SPadModule.scala 106:27]
          skip @[SPadModule.scala 105:63]
        when readWrapWire : @[SPadModule.scala 108:27]
          padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 109:26]
          skip @[SPadModule.scala 108:27]
        node _T_65 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 111:43]
        node _T_66 = tail(_T_65, 1) @[SPadModule.scala 111:43]
        padReadIndexReg <= _T_66 @[SPadModule.scala 111:24]
        skip @[SPadModule.scala 104:19]
      skip @[SPadModule.scala 101:23]
    dataWire <= dataSPadReg[padReadIndexReg] @[SPadModule.scala 114:12]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 119:16]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 120:27]
    
  module WeightSPadAdrModule : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {columnNum : UInt<4>, readOutData : UInt<7>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<4>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<4>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<7> @[SPadModule.scala 182:38]
    reg padWriteIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 183:49]
    reg padReadIndexReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[SPadModule.scala 184:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 185:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 186:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 187:42]
    wire writeFire : UInt<1> @[SPadModule.scala 188:39]
    node _T = and(io.dataPath.writeInData.data.ready, io.dataPath.writeInData.data.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 189:39]
    writeFire <= _T_1 @[SPadModule.scala 189:13]
    node _T_2 = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 190:41]
    node _T_3 = and(_T_2, writeFire) @[SPadModule.scala 190:49]
    writeWrapWire <= _T_3 @[SPadModule.scala 190:17]
    node _T_4 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 191:28]
    node _T_5 = and(_T_4, readIndexInc) @[SPadModule.scala 191:36]
    readWrapWire <= _T_5 @[SPadModule.scala 191:16]
    io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 193:25]
    node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 194:79]
    node _T_7 = tail(_T_6, 1) @[SPadModule.scala 194:79]
    node _T_8 = mux(writeWrapWire, UInt<1>("h00"), _T_7) @[SPadModule.scala 194:41]
    node _T_9 = mux(writeFire, _T_8, padWriteIndexReg) @[SPadModule.scala 194:26]
    padWriteIndexReg <= _T_9 @[SPadModule.scala 194:20]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 196:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 197:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 198:25]
    wire _T_10 : UInt<7>[16] @[SPadModule.scala 133:53]
    _T_10[0] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[1] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[2] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[3] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[4] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[5] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[6] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[7] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[8] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[9] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[10] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[11] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[12] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[13] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[14] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    _T_10[15] <= UInt<7>("h00") @[SPadModule.scala 133:53]
    reg addressSPad : UInt<7>[16], clock with : (reset => (reset, _T_10)) @[SPadModule.scala 133:45]
    when writeFire : @[SPadModule.scala 136:20]
      addressSPad[padWriteIndexReg] <= io.dataPath.writeInData.data.bits @[SPadModule.scala 137:31]
      skip @[SPadModule.scala 136:20]
    when readIndexInc : @[SPadModule.scala 200:25]
      node _T_11 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 201:42]
      node _T_12 = tail(_T_11, 1) @[SPadModule.scala 201:42]
      padReadIndexReg <= _T_12 @[SPadModule.scala 201:23]
      when readWrapWire : @[SPadModule.scala 202:27]
        padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 203:25]
        skip @[SPadModule.scala 202:27]
      skip @[SPadModule.scala 200:25]
    dataWire <= addressSPad[padReadIndexReg] @[SPadModule.scala 142:12]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 143:27]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 144:16]
    when io.ctrlPath.readInIdxEn : @[SPadModule.scala 124:34]
      padReadIndexReg <= io.ctrlPath.readInIdx @[SPadModule.scala 125:21]
      skip @[SPadModule.scala 124:34]
    
  module SPadDataModule_1 : 
    input clock : Clock
    input reset : Reset
    output io : {dataPath : {columnNum : UInt<7>, readOutData : UInt<12>, flip writeInData : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}, ctrlPath : {flip writeEn : UInt<1>, writeIdx : UInt<7>, writeFin : UInt<1>, flip readEn : UInt<1>, flip readInIdx : UInt<7>, flip indexInc : UInt<1>, flip readInIdxEn : UInt<1>}}
    
    wire dataWire : UInt<12> @[SPadModule.scala 182:38]
    reg padWriteIndexReg : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[SPadModule.scala 183:49]
    reg padReadIndexReg : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[SPadModule.scala 184:48]
    wire writeWrapWire : UInt<1> @[SPadModule.scala 185:43]
    wire readWrapWire : UInt<1> @[SPadModule.scala 186:42]
    wire readIndexInc : UInt<1> @[SPadModule.scala 187:42]
    wire writeFire : UInt<1> @[SPadModule.scala 188:39]
    node _T = and(io.dataPath.writeInData.data.ready, io.dataPath.writeInData.data.valid) @[Decoupled.scala 40:37]
    node _T_1 = and(_T, io.ctrlPath.writeEn) @[SPadModule.scala 189:39]
    writeFire <= _T_1 @[SPadModule.scala 189:13]
    node _T_2 = eq(io.dataPath.writeInData.data.bits, UInt<1>("h00")) @[SPadModule.scala 190:41]
    node _T_3 = and(_T_2, writeFire) @[SPadModule.scala 190:49]
    writeWrapWire <= _T_3 @[SPadModule.scala 190:17]
    node _T_4 = eq(dataWire, UInt<1>("h00")) @[SPadModule.scala 191:28]
    node _T_5 = and(_T_4, readIndexInc) @[SPadModule.scala 191:36]
    readWrapWire <= _T_5 @[SPadModule.scala 191:16]
    io.dataPath.writeInData.data.ready <= UInt<1>("h01") @[SPadModule.scala 193:25]
    node _T_6 = add(padWriteIndexReg, UInt<1>("h01")) @[SPadModule.scala 194:79]
    node _T_7 = tail(_T_6, 1) @[SPadModule.scala 194:79]
    node _T_8 = mux(writeWrapWire, UInt<1>("h00"), _T_7) @[SPadModule.scala 194:41]
    node _T_9 = mux(writeFire, _T_8, padWriteIndexReg) @[SPadModule.scala 194:26]
    padWriteIndexReg <= _T_9 @[SPadModule.scala 194:20]
    io.ctrlPath.writeIdx <= padWriteIndexReg @[SPadModule.scala 196:24]
    io.ctrlPath.writeFin <= writeWrapWire @[SPadModule.scala 197:24]
    io.dataPath.columnNum <= padReadIndexReg @[SPadModule.scala 198:25]
    smem dataSPadSRAM : UInt<12>[96], undefined @[SPadModule.scala 150:50]
    when writeFire : @[SPadModule.scala 153:22]
      write mport _T_10 = dataSPadSRAM[padWriteIndexReg], clock
      _T_10 <= io.dataPath.writeInData.data.bits
      skip @[SPadModule.scala 153:22]
    when io.ctrlPath.readInIdxEn : @[SPadModule.scala 157:36]
      padReadIndexReg <= io.ctrlPath.readInIdx @[SPadModule.scala 158:23]
      skip @[SPadModule.scala 157:36]
    else : @[SPadModule.scala 159:18]
      when readIndexInc : @[SPadModule.scala 200:25]
        node _T_11 = add(padReadIndexReg, UInt<1>("h01")) @[SPadModule.scala 201:42]
        node _T_12 = tail(_T_11, 1) @[SPadModule.scala 201:42]
        padReadIndexReg <= _T_12 @[SPadModule.scala 201:23]
        when readWrapWire : @[SPadModule.scala 202:27]
          padReadIndexReg <= UInt<1>("h00") @[SPadModule.scala 203:25]
          skip @[SPadModule.scala 202:27]
        skip @[SPadModule.scala 200:25]
      skip @[SPadModule.scala 159:18]
    wire _T_13 : UInt @[SPadModule.scala 163:30]
    _T_13 is invalid @[SPadModule.scala 163:30]
    when io.ctrlPath.readEn : @[SPadModule.scala 163:30]
      _T_13 <= padReadIndexReg @[SPadModule.scala 163:30]
      node _T_14 = or(_T_13, UInt<7>("h00")) @[SPadModule.scala 163:30]
      node _T_15 = bits(_T_14, 6, 0) @[SPadModule.scala 163:30]
      read mport _T_16 = dataSPadSRAM[_T_15], clock @[SPadModule.scala 163:30]
      skip @[SPadModule.scala 163:30]
    dataWire <= _T_16 @[SPadModule.scala 163:14]
    readIndexInc <= io.ctrlPath.indexInc @[SPadModule.scala 175:16]
    io.dataPath.readOutData <= dataWire @[SPadModule.scala 176:27]
    
  module nonToeplitzProcessingElementPad : 
    input clock : Clock
    input reset : Reset
    output io : {flip padCtrl : {doMACEn : UInt<1>, flip fromTopIO : {flip pSumEnqEn : UInt<1>, flip doLoadEn : UInt<1>, writeFinish : UInt<1>, calFinish : UInt<1>}}, dataStream : {flip ipsIO : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, opsIO : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, flip inActIOs : {adrIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}}, dataIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}, flip weightIOs : {adrIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}}, dataIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}}, debugIO : {inActMatrixData : UInt<8>, inActMatrixRow : UInt<4>, inActMatrixColumn : UInt<7>, inActAdrInc : UInt<1>, inActDataInc : UInt<1>, inActAdrIdx : UInt<7>, weightAdrSPadReadOut : UInt<7>, weightMatrixData : UInt<8>, weightMatrixRow : UInt<4>, productResult : UInt<21>, pSumResult : UInt<21>, pSumLoad : UInt<21>, weightAdrInIdx : UInt<4>, sPadState : UInt<3>, pSumReadIdx : UInt<5>, pSumPadReadIdx : UInt<5>, inActDataSliding : UInt<1>, inActDataSlidingFire : UInt<1>, futureLBStart : UInt<4>, inActDataIndex : UInt<6>, inActAdrData : UInt<7>}, padWF : {inActWriteFin : {adrWriteFin : UInt<1>, dataWriteFin : UInt<1>}, weightWriteFin : {adrWriteFin : UInt<1>, dataWriteFin : UInt<1>}, pSumAddFin : UInt<1>}}
    
    inst pSumSPadModule of PSumSPad @[nonToeplitzProcessingElement.scala 122:44]
    pSumSPadModule.clock <= clock
    pSumSPadModule.reset <= reset
    inst inActAdrSPadModule of SPadDataModule @[nonToeplitzProcessingElement.scala 124:54]
    inActAdrSPadModule.clock <= clock
    inActAdrSPadModule.reset <= reset
    inst inActDataSPadModule of nonTpActSPadDataModule @[nonToeplitzProcessingElement.scala 126:63]
    inActDataSPadModule.clock <= clock
    inActDataSPadModule.reset <= reset
    inst weightAdrSPadModule of WeightSPadAdrModule @[nonToeplitzProcessingElement.scala 128:60]
    weightAdrSPadModule.clock <= clock
    weightAdrSPadModule.reset <= reset
    inst weightDataSPadModule of SPadDataModule_1 @[nonToeplitzProcessingElement.scala 130:56]
    weightDataSPadModule.clock <= clock
    weightDataSPadModule.reset <= reset
    wire mightInActZeroColumnWire : UInt<1> @[nonToeplitzProcessingElement.scala 140:54]
    reg inActSPadZeroColumnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 141:55]
    wire mightInActIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 142:50]
    wire mightWeightZeroColumnWire : UInt<1> @[nonToeplitzProcessingElement.scala 143:55]
    wire mightWeightIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 144:51]
    wire mightInActReadFinish : UInt<1> @[nonToeplitzProcessingElement.scala 145:50]
    wire mightWeightReadFinish : UInt<1> @[nonToeplitzProcessingElement.scala 148:51]
    wire mightWeightMatrixFinish : UInt<1> @[nonToeplitzProcessingElement.scala 150:53]
    wire psDataSPadIdxWire : UInt<5> @[nonToeplitzProcessingElement.scala 151:47]
    wire inActAdrIndexWire : UInt<4> @[nonToeplitzProcessingElement.scala 152:47]
    wire inActAdrData : UInt<7> @[nonToeplitzProcessingElement.scala 153:46]
    wire inActDataIndexWire : UInt<6> @[nonToeplitzProcessingElement.scala 155:48]
    reg inActAdrSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 156:54]
    reg inActDataSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 157:55]
    wire inActAdrSPadIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 158:52]
    wire inActDataSPadIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 159:53]
    reg inActMatrixColumnReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[nonToeplitzProcessingElement.scala 160:53]
    reg inActZeroColumnNumber : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[nonToeplitzProcessingElement.scala 161:54]
    reg inActFirstRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[nonToeplitzProcessingElement.scala 162:58]
    wire inActMatrixRowWire : UInt<4> @[nonToeplitzProcessingElement.scala 164:48]
    wire inActMatrixDataWire : UInt<8> @[nonToeplitzProcessingElement.scala 166:49]
    wire weightAdrIndexWire : UInt<4> @[nonToeplitzProcessingElement.scala 169:48]
    wire weightAdrDataWire : UInt<7> @[nonToeplitzProcessingElement.scala 170:47]
    wire weightDataIndexWire : UInt<7> @[nonToeplitzProcessingElement.scala 171:49]
    reg weightAdrSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 172:55]
    reg weightDataSPadReadEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 173:56]
    wire weightAdrSPadIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 174:53]
    wire weightDataSPadIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 175:54]
    wire weightMatrixDataReg : UInt<8> @[nonToeplitzProcessingElement.scala 176:49]
    reg weightDataSPadFirstRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[nonToeplitzProcessingElement.scala 177:56]
    wire weightDataIdxMuxWire : UInt<1> @[nonToeplitzProcessingElement.scala 178:50]
    wire weightAdrSPadReadIdxWire : UInt<4> @[nonToeplitzProcessingElement.scala 179:54]
    wire weightDataIdxEnWire : UInt<1> @[nonToeplitzProcessingElement.scala 180:49]
    wire weightAdrIdxEnWire : UInt<1> @[nonToeplitzProcessingElement.scala 181:48]
    wire weightMatrixReadFirstColumn : UInt<1> @[nonToeplitzProcessingElement.scala 182:57]
    reg productReg : UInt<21>, clock with : (reset => (reset, UInt<21>("h00"))) @[nonToeplitzProcessingElement.scala 184:43]
    reg pSumSPadLoadReg : UInt<21>, clock with : (reset => (reset, UInt<21>("h00"))) @[nonToeplitzProcessingElement.scala 185:48]
    wire pSumSPadLoadWire : UInt<21> @[nonToeplitzProcessingElement.scala 186:46]
    reg PESPadStateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[nonToeplitzProcessingElement.scala 197:37]
    wire padEqIA : UInt<1> @[nonToeplitzProcessingElement.scala 199:37]
    wire padEqID : UInt<1> @[nonToeplitzProcessingElement.scala 200:37]
    wire padEqWA : UInt<1> @[nonToeplitzProcessingElement.scala 201:37]
    wire padEqMpy : UInt<1> @[nonToeplitzProcessingElement.scala 202:38]
    wire padEqWB : UInt<1> @[nonToeplitzProcessingElement.scala 203:37]
    node _T = eq(PESPadStateReg, UInt<3>("h01")) @[nonToeplitzProcessingElement.scala 204:19]
    padEqIA <= _T @[nonToeplitzProcessingElement.scala 204:11]
    node _T_1 = eq(PESPadStateReg, UInt<3>("h06")) @[nonToeplitzProcessingElement.scala 205:20]
    padEqMpy <= _T_1 @[nonToeplitzProcessingElement.scala 205:12]
    node _T_2 = eq(PESPadStateReg, UInt<3>("h07")) @[nonToeplitzProcessingElement.scala 206:19]
    padEqWB <= _T_2 @[nonToeplitzProcessingElement.scala 206:11]
    node _T_3 = eq(PESPadStateReg, UInt<3>("h03")) @[nonToeplitzProcessingElement.scala 207:19]
    padEqWA <= _T_3 @[nonToeplitzProcessingElement.scala 207:11]
    node _T_4 = eq(PESPadStateReg, UInt<3>("h02")) @[nonToeplitzProcessingElement.scala 208:19]
    padEqID <= _T_4 @[nonToeplitzProcessingElement.scala 208:11]
    node _T_5 = eq(inActMatrixRowWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 209:53]
    weightMatrixReadFirstColumn <= _T_5 @[nonToeplitzProcessingElement.scala 209:31]
    wire weightMatrixRowReg : UInt<4> @[nonToeplitzProcessingElement.scala 210:48]
    inActAdrSPadModule.io.ctrlPath.writeEn <= io.padCtrl.fromTopIO.doLoadEn @[nonToeplitzProcessingElement.scala 215:35]
    inActDataSPadModule.io.ctrlPath.writeEn <= io.padCtrl.fromTopIO.doLoadEn @[nonToeplitzProcessingElement.scala 216:36]
    weightAdrSPadModule.io.ctrlPath.writeEn <= io.padCtrl.fromTopIO.doLoadEn @[nonToeplitzProcessingElement.scala 217:36]
    weightDataSPadModule.io.ctrlPath.writeEn <= io.padCtrl.fromTopIO.doLoadEn @[nonToeplitzProcessingElement.scala 218:37]
    io.padCtrl.fromTopIO.writeFinish is invalid @[nonToeplitzProcessingElement.scala 219:36]
    wire mightInActSlidingIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 223:54]
    wire mightInActReadIdxBeyondUB : UInt<1> @[nonToeplitzProcessingElement.scala 224:55]
    wire mightInActLastNonZeroEle : UInt<1> @[nonToeplitzProcessingElement.scala 225:54]
    reg currentSliding : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 229:47]
    reg currentLowerBound : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[nonToeplitzProcessingElement.scala 234:50]
    reg currentUpperBound : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[nonToeplitzProcessingElement.scala 235:50]
    inActDataSPadModule.io.dataPath.currentSliding <= currentSliding @[nonToeplitzProcessingElement.scala 237:43]
    currentLowerBound <= inActDataSPadModule.io.dataPath.slidingBoxLB @[nonToeplitzProcessingElement.scala 238:21]
    currentUpperBound <= inActDataSPadModule.io.dataPath.slidingBoxUB @[nonToeplitzProcessingElement.scala 239:21]
    mightInActSlidingIncWire <= inActDataSPadModule.io.ctrlPath.slidingInc @[nonToeplitzProcessingElement.scala 241:28]
    mightInActReadIdxBeyondUB <= inActDataSPadModule.io.ctrlPath.inActReadIdxBeyondUB @[nonToeplitzProcessingElement.scala 242:29]
    mightInActLastNonZeroEle <= inActDataSPadModule.io.ctrlPath.inActLastNonZeroEle @[nonToeplitzProcessingElement.scala 243:28]
    node _T_6 = mul(currentSliding, UInt<3>("h04")) @[nonToeplitzProcessingElement.scala 248:60]
    node _T_7 = add(weightMatrixRowReg, _T_6) @[nonToeplitzProcessingElement.scala 248:43]
    node _T_8 = tail(_T_7, 1) @[nonToeplitzProcessingElement.scala 248:43]
    node _T_9 = mul(inActMatrixColumnReg, UInt<2>("h02")) @[nonToeplitzProcessingElement.scala 248:90]
    node _T_10 = mul(_T_9, UInt<3>("h04")) @[nonToeplitzProcessingElement.scala 248:96]
    node _T_11 = add(_T_8, _T_10) @[nonToeplitzProcessingElement.scala 248:67]
    node _T_12 = tail(_T_11, 1) @[nonToeplitzProcessingElement.scala 248:67]
    psDataSPadIdxWire <= _T_12 @[nonToeplitzProcessingElement.scala 248:21]
    node _T_13 = add(inActDataIndexWire, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 249:69]
    node _T_14 = tail(_T_13, 1) @[nonToeplitzProcessingElement.scala 249:69]
    node _T_15 = eq(inActAdrData, _T_14) @[nonToeplitzProcessingElement.scala 249:45]
    node _T_16 = sub(UInt<2>("h02"), UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 250:30]
    node _T_17 = tail(_T_16, 1) @[nonToeplitzProcessingElement.scala 250:30]
    node _T_18 = eq(currentSliding, _T_17) @[nonToeplitzProcessingElement.scala 250:21]
    node _T_19 = and(_T_15, _T_18) @[nonToeplitzProcessingElement.scala 249:77]
    mightInActIdxIncWire <= _T_19 @[nonToeplitzProcessingElement.scala 249:24]
    inActDataSPadModule.io.ctrlPath.inActColInc <= mightInActIdxIncWire @[nonToeplitzProcessingElement.scala 251:40]
    inActDataSPadModule.io.ctrlPath.weightIdxInc <= mightWeightIdxIncWire @[nonToeplitzProcessingElement.scala 252:41]
    inActDataSPadModule.io.ctrlPath.padEqMpyBool <= padEqMpy @[nonToeplitzProcessingElement.scala 253:41]
    inActDataSPadModule.io.ctrlPath.padEqWABool <= padEqWA @[nonToeplitzProcessingElement.scala 254:40]
    inActDataSPadModule.io.ctrlPath.padEqIDBool <= padEqID @[nonToeplitzProcessingElement.scala 255:40]
    inActDataSPadModule.io.ctrlPath.mightWeightZeroColumn <= mightWeightZeroColumnWire @[nonToeplitzProcessingElement.scala 256:50]
    inActAdrSPadModule.io.dataPath.writeInData.data.bits <= io.dataStream.inActIOs.adrIOs.data.bits @[nonToeplitzProcessingElement.scala 267:39]
    inActAdrSPadModule.io.dataPath.writeInData.data.valid <= io.dataStream.inActIOs.adrIOs.data.valid @[nonToeplitzProcessingElement.scala 267:39]
    io.dataStream.inActIOs.adrIOs.data.ready <= inActAdrSPadModule.io.dataPath.writeInData.data.ready @[nonToeplitzProcessingElement.scala 267:39]
    inActAdrIndexWire <= inActAdrSPadModule.io.dataPath.columnNum @[nonToeplitzProcessingElement.scala 268:21]
    inActAdrData <= inActAdrSPadModule.io.dataPath.readOutData @[nonToeplitzProcessingElement.scala 269:20]
    io.padWF.inActWriteFin.adrWriteFin <= inActAdrSPadModule.io.ctrlPath.writeFin @[nonToeplitzProcessingElement.scala 270:38]
    inActAdrSPadModule.io.ctrlPath.readEn <= inActAdrSPadReadEnReg @[nonToeplitzProcessingElement.scala 271:34]
    inActAdrSPadModule.io.ctrlPath.readInIdx is invalid @[nonToeplitzProcessingElement.scala 272:37]
    inActAdrSPadModule.io.ctrlPath.indexInc <= inActAdrSPadIdxIncWire @[nonToeplitzProcessingElement.scala 273:36]
    inActAdrSPadModule.io.ctrlPath.readInIdxEn is invalid @[nonToeplitzProcessingElement.scala 274:39]
    inActDataSPadModule.io.dataPath.writeInData.data.bits <= io.dataStream.inActIOs.dataIOs.data.bits @[nonToeplitzProcessingElement.scala 277:40]
    inActDataSPadModule.io.dataPath.writeInData.data.valid <= io.dataStream.inActIOs.dataIOs.data.valid @[nonToeplitzProcessingElement.scala 277:40]
    io.dataStream.inActIOs.dataIOs.data.ready <= inActDataSPadModule.io.dataPath.writeInData.data.ready @[nonToeplitzProcessingElement.scala 277:40]
    inActDataIndexWire <= inActDataSPadModule.io.dataPath.columnNum @[nonToeplitzProcessingElement.scala 278:22]
    node _T_20 = bits(inActDataSPadModule.io.dataPath.readOutData, 11, 4) @[nonToeplitzProcessingElement.scala 279:62]
    inActMatrixDataWire <= _T_20 @[nonToeplitzProcessingElement.scala 279:23]
    node _T_21 = bits(inActDataSPadModule.io.dataPath.readOutData, 3, 0) @[nonToeplitzProcessingElement.scala 280:61]
    node _T_22 = mul(UInt<2>("h02"), currentSliding) @[nonToeplitzProcessingElement.scala 280:91]
    node _T_23 = sub(_T_21, _T_22) @[nonToeplitzProcessingElement.scala 280:84]
    node _T_24 = tail(_T_23, 1) @[nonToeplitzProcessingElement.scala 280:84]
    inActMatrixRowWire <= _T_24 @[nonToeplitzProcessingElement.scala 280:22]
    io.padWF.inActWriteFin.dataWriteFin <= inActDataSPadModule.io.ctrlPath.writeFin @[nonToeplitzProcessingElement.scala 282:39]
    inActDataSPadModule.io.ctrlPath.readEn <= inActDataSPadReadEnReg @[nonToeplitzProcessingElement.scala 283:35]
    inActDataSPadModule.io.ctrlPath.readInIdx <= inActAdrData @[nonToeplitzProcessingElement.scala 284:38]
    inActDataSPadModule.io.ctrlPath.indexInc <= inActDataSPadIdxIncWire @[nonToeplitzProcessingElement.scala 285:37]
    inActDataSPadModule.io.ctrlPath.readInIdxEn is invalid @[nonToeplitzProcessingElement.scala 286:40]
    weightAdrSPadModule.io.dataPath.writeInData.data.bits <= io.dataStream.weightIOs.adrIOs.data.bits @[nonToeplitzProcessingElement.scala 289:40]
    weightAdrSPadModule.io.dataPath.writeInData.data.valid <= io.dataStream.weightIOs.adrIOs.data.valid @[nonToeplitzProcessingElement.scala 289:40]
    io.dataStream.weightIOs.adrIOs.data.ready <= weightAdrSPadModule.io.dataPath.writeInData.data.ready @[nonToeplitzProcessingElement.scala 289:40]
    weightAdrIndexWire <= weightAdrSPadModule.io.dataPath.columnNum @[nonToeplitzProcessingElement.scala 290:22]
    weightAdrDataWire <= weightAdrSPadModule.io.dataPath.readOutData @[nonToeplitzProcessingElement.scala 291:21]
    io.padWF.weightWriteFin.adrWriteFin <= weightAdrSPadModule.io.ctrlPath.writeFin @[nonToeplitzProcessingElement.scala 292:39]
    weightAdrSPadModule.io.ctrlPath.readEn <= weightAdrSPadReadEnReg @[nonToeplitzProcessingElement.scala 293:35]
    weightAdrSPadModule.io.ctrlPath.readInIdx <= weightAdrSPadReadIdxWire @[nonToeplitzProcessingElement.scala 294:38]
    weightAdrSPadModule.io.ctrlPath.indexInc <= weightAdrSPadIdxIncWire @[nonToeplitzProcessingElement.scala 297:37]
    weightAdrSPadModule.io.ctrlPath.readInIdxEn <= weightAdrIdxEnWire @[nonToeplitzProcessingElement.scala 298:40]
    weightDataSPadModule.io.dataPath.writeInData.data.bits <= io.dataStream.weightIOs.dataIOs.data.bits @[nonToeplitzProcessingElement.scala 301:41]
    weightDataSPadModule.io.dataPath.writeInData.data.valid <= io.dataStream.weightIOs.dataIOs.data.valid @[nonToeplitzProcessingElement.scala 301:41]
    io.dataStream.weightIOs.dataIOs.data.ready <= weightDataSPadModule.io.dataPath.writeInData.data.ready @[nonToeplitzProcessingElement.scala 301:41]
    weightDataIndexWire <= weightDataSPadModule.io.dataPath.columnNum @[nonToeplitzProcessingElement.scala 302:23]
    node _T_25 = bits(weightDataSPadModule.io.dataPath.readOutData, 11, 4) @[nonToeplitzProcessingElement.scala 303:63]
    weightMatrixDataReg <= _T_25 @[nonToeplitzProcessingElement.scala 303:23]
    node _T_26 = bits(weightDataSPadModule.io.dataPath.readOutData, 3, 0) @[nonToeplitzProcessingElement.scala 304:62]
    weightMatrixRowReg <= _T_26 @[nonToeplitzProcessingElement.scala 304:22]
    io.padWF.weightWriteFin.dataWriteFin <= weightDataSPadModule.io.ctrlPath.writeFin @[nonToeplitzProcessingElement.scala 305:40]
    weightDataSPadModule.io.ctrlPath.readEn <= inActDataSPadReadEnReg @[nonToeplitzProcessingElement.scala 306:36]
    node _T_27 = mux(weightMatrixReadFirstColumn, UInt<1>("h00"), weightAdrDataWire) @[nonToeplitzProcessingElement.scala 307:45]
    weightDataSPadModule.io.ctrlPath.readInIdx <= _T_27 @[nonToeplitzProcessingElement.scala 307:39]
    weightDataSPadModule.io.ctrlPath.indexInc <= weightDataSPadIdxIncWire @[nonToeplitzProcessingElement.scala 308:38]
    weightDataSPadModule.io.ctrlPath.readInIdxEn <= weightDataIdxEnWire @[nonToeplitzProcessingElement.scala 309:41]
    reg pSumLoadStateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 312:49]
    node _T_28 = mux(pSumLoadStateReg, pSumSPadLoadWire, pSumSPadLoadReg) @[nonToeplitzProcessingElement.scala 314:46]
    node _T_29 = mux(pSumLoadStateReg, io.dataStream.ipsIO.bits, productReg) @[nonToeplitzProcessingElement.scala 315:8]
    node _T_30 = add(_T_28, _T_29) @[nonToeplitzProcessingElement.scala 314:100]
    node pSumAddResultWire = tail(_T_30, 1) @[nonToeplitzProcessingElement.scala 314:100]
    node pSumResultWire = mux(padEqWB, pSumAddResultWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 316:43]
    reg pSumPadReadIdxReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[nonToeplitzProcessingElement.scala 317:50]
    wire pSumPadReadIdxIncWire : UInt<1> @[nonToeplitzProcessingElement.scala 319:51]
    wire pSumPadReadWrap : UInt<1> @[nonToeplitzProcessingElement.scala 321:45]
    node _T_31 = mux(io.padCtrl.fromTopIO.pSumEnqEn, UInt<1>("h01"), pSumLoadStateReg) @[nonToeplitzProcessingElement.scala 324:8]
    node _T_32 = mux(io.padWF.pSumAddFin, UInt<1>("h00"), _T_31) @[nonToeplitzProcessingElement.scala 323:26]
    pSumLoadStateReg <= _T_32 @[nonToeplitzProcessingElement.scala 323:20]
    node pSumReadOutValid = and(io.dataStream.ipsIO.valid, pSumLoadStateReg) @[nonToeplitzProcessingElement.scala 325:68]
    node _T_33 = and(pSumPadReadWrap, pSumLoadStateReg) @[nonToeplitzProcessingElement.scala 328:42]
    io.padWF.pSumAddFin <= _T_33 @[nonToeplitzProcessingElement.scala 328:23]
    node _T_34 = and(io.dataStream.opsIO.ready, pSumLoadStateReg) @[nonToeplitzProcessingElement.scala 329:58]
    io.dataStream.ipsIO.ready <= _T_34 @[nonToeplitzProcessingElement.scala 329:29]
    node _T_35 = and(io.dataStream.opsIO.ready, io.dataStream.opsIO.valid) @[Decoupled.scala 40:37]
    pSumPadReadIdxIncWire <= _T_35 @[nonToeplitzProcessingElement.scala 331:25]
    io.dataStream.opsIO.bits <= pSumAddResultWire @[nonToeplitzProcessingElement.scala 334:28]
    node _T_36 = and(pSumSPadModule.io.dataPath.opsIO.ready, pSumSPadModule.io.dataPath.opsIO.valid) @[Decoupled.scala 40:37]
    node _T_37 = and(_T_36, pSumReadOutValid) @[nonToeplitzProcessingElement.scala 338:65]
    io.dataStream.opsIO.valid <= _T_37 @[nonToeplitzProcessingElement.scala 338:29]
    pSumSPadModule.io.dataPath.ipsIO.valid <= padEqWB @[nonToeplitzProcessingElement.scala 344:35]
    pSumSPadModule.io.dataPath.ipsIO.bits <= pSumResultWire @[nonToeplitzProcessingElement.scala 345:34]
    pSumSPadLoadWire <= pSumSPadModule.io.dataPath.opsIO.bits @[nonToeplitzProcessingElement.scala 346:20]
    pSumSPadLoadReg <= pSumSPadLoadWire @[nonToeplitzProcessingElement.scala 347:19]
    node _T_38 = or(padEqMpy, pSumReadOutValid) @[nonToeplitzProcessingElement.scala 349:47]
    pSumSPadModule.io.dataPath.opsIO.ready <= _T_38 @[nonToeplitzProcessingElement.scala 349:35]
    pSumSPadModule.io.ctrlPath.readIdx <= pSumPadReadIdxReg @[nonToeplitzProcessingElement.scala 350:31]
    pSumSPadModule.io.ctrlPath.writeIdx <= psDataSPadIdxWire @[nonToeplitzProcessingElement.scala 351:32]
    node _T_39 = eq(PESPadStateReg, UInt<3>("h05")) @[nonToeplitzProcessingElement.scala 354:33]
    node _T_40 = add(pSumPadReadIdxReg, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 355:76]
    node _T_41 = tail(_T_40, 1) @[nonToeplitzProcessingElement.scala 355:76]
    node _T_42 = mux(pSumPadReadIdxIncWire, _T_41, pSumPadReadIdxReg) @[nonToeplitzProcessingElement.scala 355:34]
    node _T_43 = mux(pSumPadReadWrap, UInt<1>("h00"), _T_42) @[nonToeplitzProcessingElement.scala 355:8]
    node _T_44 = mux(_T_39, psDataSPadIdxWire, _T_43) @[nonToeplitzProcessingElement.scala 354:27]
    pSumPadReadIdxReg <= _T_44 @[nonToeplitzProcessingElement.scala 354:21]
    node _T_45 = and(padEqID, mightInActReadFinish) @[nonToeplitzProcessingElement.scala 359:31]
    node _T_46 = and(padEqWB, mightInActReadFinish) @[nonToeplitzProcessingElement.scala 359:68]
    node _T_47 = or(_T_45, _T_46) @[nonToeplitzProcessingElement.scala 359:56]
    node _T_48 = sub(UInt<2>("h02"), UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 360:54]
    node _T_49 = tail(_T_48, 1) @[nonToeplitzProcessingElement.scala 360:54]
    node _T_50 = eq(currentSliding, _T_49) @[nonToeplitzProcessingElement.scala 360:46]
    node _T_51 = and(pSumPadReadIdxIncWire, _T_50) @[nonToeplitzProcessingElement.scala 360:28]
    node _T_52 = eq(pSumPadReadIdxReg, UInt<5>("h017")) @[nonToeplitzProcessingElement.scala 360:81]
    node _T_53 = and(_T_51, _T_52) @[nonToeplitzProcessingElement.scala 360:60]
    node _T_54 = or(_T_47, _T_53) @[nonToeplitzProcessingElement.scala 359:93]
    pSumPadReadWrap <= _T_54 @[nonToeplitzProcessingElement.scala 359:19]
    node _T_55 = eq(inActAdrData, UInt<7>("h07f")) @[nonToeplitzProcessingElement.scala 363:48]
    mightInActZeroColumnWire <= _T_55 @[nonToeplitzProcessingElement.scala 363:28]
    node _T_56 = eq(weightAdrDataWire, UInt<7>("h07f")) @[nonToeplitzProcessingElement.scala 364:50]
    mightWeightZeroColumnWire <= _T_56 @[nonToeplitzProcessingElement.scala 364:29]
    node _T_57 = add(weightDataIndexWire, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 366:71]
    node _T_58 = tail(_T_57, 1) @[nonToeplitzProcessingElement.scala 366:71]
    node _T_59 = eq(weightAdrDataWire, _T_58) @[nonToeplitzProcessingElement.scala 366:46]
    node _T_60 = or(_T_59, mightWeightReadFinish) @[nonToeplitzProcessingElement.scala 366:78]
    mightWeightIdxIncWire <= _T_60 @[nonToeplitzProcessingElement.scala 366:25]
    node _T_61 = eq(inActMatrixDataWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 367:47]
    node _T_62 = eq(inActFirstRead, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 367:58]
    node _T_63 = and(_T_61, _T_62) @[nonToeplitzProcessingElement.scala 367:55]
    mightInActReadFinish <= _T_63 @[nonToeplitzProcessingElement.scala 367:24]
    node _T_64 = eq(weightMatrixDataReg, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 369:48]
    node _T_65 = eq(weightDataSPadFirstRead, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 369:59]
    node _T_66 = and(_T_64, _T_65) @[nonToeplitzProcessingElement.scala 369:56]
    mightWeightReadFinish <= _T_66 @[nonToeplitzProcessingElement.scala 369:25]
    node _T_67 = eq(weightAdrDataWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 370:48]
    mightWeightMatrixFinish <= _T_67 @[nonToeplitzProcessingElement.scala 370:27]
    node _T_68 = and(padEqIA, mightInActZeroColumnWire) @[nonToeplitzProcessingElement.scala 371:38]
    node _T_69 = and(padEqWA, mightWeightZeroColumnWire) @[nonToeplitzProcessingElement.scala 371:81]
    node _T_70 = and(padEqWB, mightWeightIdxIncWire) @[nonToeplitzProcessingElement.scala 372:14]
    node _T_71 = or(_T_69, _T_70) @[nonToeplitzProcessingElement.scala 371:111]
    node _T_72 = and(_T_71, mightInActIdxIncWire) @[nonToeplitzProcessingElement.scala 372:41]
    node _T_73 = or(_T_68, _T_72) @[nonToeplitzProcessingElement.scala 371:67]
    node _T_74 = neq(PESPadStateReg, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 372:99]
    node _T_75 = and(mightInActReadFinish, _T_74) @[nonToeplitzProcessingElement.scala 372:91]
    node _T_76 = or(_T_73, _T_75) @[nonToeplitzProcessingElement.scala 372:66]
    inActAdrSPadIdxIncWire <= _T_76 @[nonToeplitzProcessingElement.scala 371:26]
    node _T_77 = eq(PESPadStateReg, UInt<3>("h04")) @[nonToeplitzProcessingElement.scala 373:48]
    node _T_78 = or(padEqMpy, _T_77) @[nonToeplitzProcessingElement.scala 373:40]
    node _T_79 = and(_T_78, mightWeightZeroColumnWire) @[nonToeplitzProcessingElement.scala 373:68]
    weightAdrSPadIdxIncWire <= _T_79 @[nonToeplitzProcessingElement.scala 373:27]
    node _T_80 = eq(mightInActZeroColumnWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 375:42]
    node _T_81 = and(padEqIA, _T_80) @[nonToeplitzProcessingElement.scala 375:39]
    node _T_82 = eq(inActFirstRead, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 375:71]
    node _T_83 = and(_T_81, _T_82) @[nonToeplitzProcessingElement.scala 375:68]
    node _T_84 = and(padEqWA, mightWeightZeroColumnWire) @[nonToeplitzProcessingElement.scala 376:16]
    node _T_85 = and(padEqWB, mightWeightIdxIncWire) @[nonToeplitzProcessingElement.scala 377:16]
    node _T_86 = or(_T_84, _T_85) @[nonToeplitzProcessingElement.scala 376:46]
    node _T_87 = eq(mightInActIdxIncWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 377:46]
    node _T_88 = and(_T_86, _T_87) @[nonToeplitzProcessingElement.scala 377:43]
    node _T_89 = or(_T_83, _T_88) @[nonToeplitzProcessingElement.scala 375:99]
    node _T_90 = neq(PESPadStateReg, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 378:35]
    node _T_91 = and(mightInActReadFinish, _T_90) @[nonToeplitzProcessingElement.scala 378:27]
    node _T_92 = or(_T_89, _T_91) @[nonToeplitzProcessingElement.scala 377:69]
    node _T_93 = and(padEqID, mightInActReadIdxBeyondUB) @[nonToeplitzProcessingElement.scala 378:56]
    node _T_94 = or(_T_92, _T_93) @[nonToeplitzProcessingElement.scala 378:44]
    inActDataSPadIdxIncWire <= _T_94 @[nonToeplitzProcessingElement.scala 375:27]
    node _T_95 = eq(mightWeightZeroColumnWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 379:43]
    node _T_96 = and(padEqWA, _T_95) @[nonToeplitzProcessingElement.scala 379:40]
    node _T_97 = eq(weightDataSPadFirstRead, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 379:73]
    node _T_98 = and(_T_96, _T_97) @[nonToeplitzProcessingElement.scala 379:70]
    node _T_99 = eq(mightWeightIdxIncWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 380:17]
    node _T_100 = and(padEqWB, _T_99) @[nonToeplitzProcessingElement.scala 380:14]
    node _T_101 = or(_T_98, _T_100) @[nonToeplitzProcessingElement.scala 379:99]
    weightDataSPadIdxIncWire <= _T_101 @[nonToeplitzProcessingElement.scala 379:28]
    node _T_102 = or(padEqID, padEqWA) @[nonToeplitzProcessingElement.scala 381:34]
    node _T_103 = and(_T_102, weightDataSPadFirstRead) @[nonToeplitzProcessingElement.scala 381:46]
    weightAdrIdxEnWire <= _T_103 @[nonToeplitzProcessingElement.scala 381:22]
    node _T_104 = and(padEqID, weightDataSPadFirstRead) @[nonToeplitzProcessingElement.scala 383:35]
    node _T_105 = eq(weightMatrixReadFirstColumn, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 383:65]
    node _T_106 = and(_T_104, _T_105) @[nonToeplitzProcessingElement.scala 383:62]
    weightDataIdxMuxWire <= _T_106 @[nonToeplitzProcessingElement.scala 383:24]
    node _T_107 = sub(inActMatrixRowWire, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 384:76]
    node _T_108 = tail(_T_107, 1) @[nonToeplitzProcessingElement.scala 384:76]
    node _T_109 = mux(weightDataIdxMuxWire, _T_108, inActMatrixRowWire) @[nonToeplitzProcessingElement.scala 384:34]
    weightAdrSPadReadIdxWire <= _T_109 @[nonToeplitzProcessingElement.scala 384:28]
    node _T_110 = and(padEqWA, weightDataSPadFirstRead) @[nonToeplitzProcessingElement.scala 385:34]
    node _T_111 = eq(mightWeightZeroColumnWire, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 385:64]
    node _T_112 = and(_T_110, _T_111) @[nonToeplitzProcessingElement.scala 385:61]
    weightDataIdxEnWire <= _T_112 @[nonToeplitzProcessingElement.scala 385:23]
    node _T_113 = neq(PESPadStateReg, UInt<1>("h00")) @[nonToeplitzProcessingElement.scala 386:66]
    node _T_114 = and(mightInActReadFinish, _T_113) @[nonToeplitzProcessingElement.scala 386:58]
    io.padCtrl.fromTopIO.calFinish <= _T_114 @[nonToeplitzProcessingElement.scala 386:34]
    node _T_115 = eq(UInt<3>("h00"), PESPadStateReg) @[Conditional.scala 37:30]
    when _T_115 : @[Conditional.scala 40:58]
      when io.padCtrl.doMACEn : @[nonToeplitzProcessingElement.scala 390:32]
        PESPadStateReg <= UInt<3>("h01") @[nonToeplitzProcessingElement.scala 75:10]
        inActAdrSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 76:27]
        inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 77:28]
        weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 78:28]
        weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 79:29]
        weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 80:29]
        skip @[nonToeplitzProcessingElement.scala 390:32]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_116 = eq(UInt<3>("h01"), PESPadStateReg) @[Conditional.scala 37:30]
      when _T_116 : @[Conditional.scala 39:67]
        when mightInActZeroColumnWire : @[nonToeplitzProcessingElement.scala 395:38]
          PESPadStateReg <= UInt<3>("h01") @[nonToeplitzProcessingElement.scala 75:10]
          inActAdrSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 76:27]
          inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 77:28]
          weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 78:28]
          weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 79:29]
          weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 80:29]
          inActSPadZeroColumnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 397:32]
          node _T_117 = add(inActZeroColumnNumber, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 398:56]
          node _T_118 = tail(_T_117, 1) @[nonToeplitzProcessingElement.scala 398:56]
          inActZeroColumnNumber <= _T_118 @[nonToeplitzProcessingElement.scala 398:31]
          skip @[nonToeplitzProcessingElement.scala 395:38]
        else : @[nonToeplitzProcessingElement.scala 399:19]
          PESPadStateReg <= UInt<3>("h02") @[nonToeplitzProcessingElement.scala 84:10]
          inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 85:27]
          inActDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 86:28]
          weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 87:28]
          weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 88:29]
          weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 89:29]
          skip @[nonToeplitzProcessingElement.scala 399:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_119 = eq(UInt<3>("h02"), PESPadStateReg) @[Conditional.scala 37:30]
        when _T_119 : @[Conditional.scala 39:67]
          when mightInActReadFinish : @[nonToeplitzProcessingElement.scala 404:34]
            PESPadStateReg <= UInt<3>("h00") @[nonToeplitzProcessingElement.scala 116:10]
            inActFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 117:31]
            inActMatrixColumnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 118:26]
            skip @[nonToeplitzProcessingElement.scala 404:34]
          else : @[nonToeplitzProcessingElement.scala 406:45]
            when mightInActSlidingIncWire : @[nonToeplitzProcessingElement.scala 406:45]
              PESPadStateReg <= UInt<3>("h02") @[nonToeplitzProcessingElement.scala 84:10]
              inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 85:27]
              inActDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 86:28]
              weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 87:28]
              weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 88:29]
              weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 89:29]
              node _T_120 = add(currentSliding, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 408:42]
              node _T_121 = tail(_T_120, 1) @[nonToeplitzProcessingElement.scala 408:42]
              currentSliding <= _T_121 @[nonToeplitzProcessingElement.scala 408:24]
              skip @[nonToeplitzProcessingElement.scala 406:45]
            else : @[nonToeplitzProcessingElement.scala 409:19]
              PESPadStateReg <= UInt<3>("h03") @[nonToeplitzProcessingElement.scala 93:10]
              inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 94:27]
              inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 95:28]
              weightAdrSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 96:28]
              weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 97:29]
              skip @[nonToeplitzProcessingElement.scala 409:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_122 = eq(UInt<3>("h03"), PESPadStateReg) @[Conditional.scala 37:30]
          when _T_122 : @[Conditional.scala 39:67]
            inActFirstRead <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 414:33]
            when mightWeightZeroColumnWire : @[nonToeplitzProcessingElement.scala 415:39]
              when mightInActIdxIncWire : @[nonToeplitzProcessingElement.scala 416:36]
                PESPadStateReg <= UInt<3>("h01") @[nonToeplitzProcessingElement.scala 75:10]
                inActAdrSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 76:27]
                inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 77:28]
                weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 78:28]
                weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 79:29]
                weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 80:29]
                currentSliding <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 418:26]
                when inActSPadZeroColumnReg : @[nonToeplitzProcessingElement.scala 419:40]
                  inActSPadZeroColumnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 420:36]
                  node _T_123 = add(inActMatrixColumnReg, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 421:58]
                  node _T_124 = tail(_T_123, 1) @[nonToeplitzProcessingElement.scala 421:58]
                  node _T_125 = add(_T_124, inActZeroColumnNumber) @[nonToeplitzProcessingElement.scala 421:64]
                  node _T_126 = tail(_T_125, 1) @[nonToeplitzProcessingElement.scala 421:64]
                  inActMatrixColumnReg <= _T_126 @[nonToeplitzProcessingElement.scala 421:34]
                  inActZeroColumnNumber <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 422:35]
                  skip @[nonToeplitzProcessingElement.scala 419:40]
                else : @[nonToeplitzProcessingElement.scala 423:23]
                  node _T_127 = add(inActMatrixColumnReg, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 424:58]
                  node _T_128 = tail(_T_127, 1) @[nonToeplitzProcessingElement.scala 424:58]
                  inActMatrixColumnReg <= _T_128 @[nonToeplitzProcessingElement.scala 424:34]
                  skip @[nonToeplitzProcessingElement.scala 423:23]
                skip @[nonToeplitzProcessingElement.scala 416:36]
              else : @[nonToeplitzProcessingElement.scala 426:21]
                PESPadStateReg <= UInt<3>("h02") @[nonToeplitzProcessingElement.scala 84:10]
                inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 85:27]
                inActDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 86:28]
                weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 87:28]
                weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 88:29]
                weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 89:29]
                skip @[nonToeplitzProcessingElement.scala 426:21]
              skip @[nonToeplitzProcessingElement.scala 415:39]
            else : @[nonToeplitzProcessingElement.scala 429:19]
              PESPadStateReg <= UInt<3>("h04") @[nonToeplitzProcessingElement.scala 101:10]
              inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 102:27]
              inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 103:28]
              weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 104:28]
              weightDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 105:29]
              skip @[nonToeplitzProcessingElement.scala 429:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_129 = eq(UInt<3>("h04"), PESPadStateReg) @[Conditional.scala 37:30]
            when _T_129 : @[Conditional.scala 39:67]
              PESPadStateReg <= UInt<3>("h05") @[nonToeplitzProcessingElement.scala 434:12]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_130 = eq(UInt<3>("h05"), PESPadStateReg) @[Conditional.scala 37:30]
              when _T_130 : @[Conditional.scala 39:67]
                PESPadStateReg <= UInt<3>("h06") @[nonToeplitzProcessingElement.scala 437:12]
                inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 109:27]
                inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 110:28]
                weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 111:28]
                weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 112:29]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_131 = eq(UInt<3>("h06"), PESPadStateReg) @[Conditional.scala 37:30]
                when _T_131 : @[Conditional.scala 39:67]
                  PESPadStateReg <= UInt<3>("h07") @[nonToeplitzProcessingElement.scala 441:12]
                  node _T_132 = mul(weightMatrixDataReg, inActMatrixDataWire) @[nonToeplitzProcessingElement.scala 442:41]
                  productReg <= _T_132 @[nonToeplitzProcessingElement.scala 442:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_133 = eq(UInt<3>("h07"), PESPadStateReg) @[Conditional.scala 37:30]
                  when _T_133 : @[Conditional.scala 39:67]
                    when mightInActReadFinish : @[nonToeplitzProcessingElement.scala 449:34]
                      PESPadStateReg <= UInt<3>("h00") @[nonToeplitzProcessingElement.scala 116:10]
                      inActFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 117:31]
                      inActMatrixColumnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 118:26]
                      skip @[nonToeplitzProcessingElement.scala 449:34]
                    else : @[nonToeplitzProcessingElement.scala 451:19]
                      when mightWeightIdxIncWire : @[nonToeplitzProcessingElement.scala 452:37]
                        when mightInActSlidingIncWire : @[nonToeplitzProcessingElement.scala 454:42]
                          node _T_134 = add(currentSliding, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 455:46]
                          node _T_135 = tail(_T_134, 1) @[nonToeplitzProcessingElement.scala 455:46]
                          currentSliding <= _T_135 @[nonToeplitzProcessingElement.scala 455:28]
                          PESPadStateReg <= UInt<3>("h02") @[nonToeplitzProcessingElement.scala 84:10]
                          inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 85:27]
                          inActDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 86:28]
                          weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 87:28]
                          weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 88:29]
                          weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 89:29]
                          skip @[nonToeplitzProcessingElement.scala 454:42]
                        else : @[nonToeplitzProcessingElement.scala 457:44]
                          when mightInActIdxIncWire : @[nonToeplitzProcessingElement.scala 457:44]
                            PESPadStateReg <= UInt<3>("h01") @[nonToeplitzProcessingElement.scala 75:10]
                            inActAdrSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 76:27]
                            inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 77:28]
                            weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 78:28]
                            weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 79:29]
                            weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 80:29]
                            currentSliding <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 459:28]
                            when inActSPadZeroColumnReg : @[nonToeplitzProcessingElement.scala 460:42]
                              inActSPadZeroColumnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 461:38]
                              node _T_136 = add(inActMatrixColumnReg, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 462:60]
                              node _T_137 = tail(_T_136, 1) @[nonToeplitzProcessingElement.scala 462:60]
                              node _T_138 = add(_T_137, inActZeroColumnNumber) @[nonToeplitzProcessingElement.scala 462:66]
                              node _T_139 = tail(_T_138, 1) @[nonToeplitzProcessingElement.scala 462:66]
                              inActMatrixColumnReg <= _T_139 @[nonToeplitzProcessingElement.scala 462:36]
                              inActZeroColumnNumber <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 463:37]
                              skip @[nonToeplitzProcessingElement.scala 460:42]
                            else : @[nonToeplitzProcessingElement.scala 464:25]
                              node _T_140 = add(inActMatrixColumnReg, UInt<1>("h01")) @[nonToeplitzProcessingElement.scala 465:60]
                              node _T_141 = tail(_T_140, 1) @[nonToeplitzProcessingElement.scala 465:60]
                              inActMatrixColumnReg <= _T_141 @[nonToeplitzProcessingElement.scala 465:36]
                              skip @[nonToeplitzProcessingElement.scala 464:25]
                            skip @[nonToeplitzProcessingElement.scala 457:44]
                          else : @[nonToeplitzProcessingElement.scala 467:24]
                            PESPadStateReg <= UInt<3>("h02") @[nonToeplitzProcessingElement.scala 84:10]
                            inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 85:27]
                            inActDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 86:28]
                            weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 87:28]
                            weightDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 88:29]
                            weightDataSPadFirstRead <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 89:29]
                            skip @[nonToeplitzProcessingElement.scala 467:24]
                        skip @[nonToeplitzProcessingElement.scala 452:37]
                      else : @[nonToeplitzProcessingElement.scala 470:21]
                        PESPadStateReg <= UInt<3>("h04") @[nonToeplitzProcessingElement.scala 101:10]
                        inActAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 102:27]
                        inActDataSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 103:28]
                        weightAdrSPadReadEnReg <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 104:28]
                        weightDataSPadReadEnReg <= UInt<1>("h01") @[nonToeplitzProcessingElement.scala 105:29]
                        weightDataSPadFirstRead <= UInt<1>("h00") @[nonToeplitzProcessingElement.scala 472:35]
                        skip @[nonToeplitzProcessingElement.scala 470:21]
                      skip @[nonToeplitzProcessingElement.scala 451:19]
                    skip @[Conditional.scala 39:67]
    io.debugIO.inActMatrixColumn <= inActMatrixColumnReg @[nonToeplitzProcessingElement.scala 479:34]
    io.debugIO.inActMatrixData <= inActMatrixDataWire @[nonToeplitzProcessingElement.scala 480:32]
    io.debugIO.inActMatrixRow <= inActMatrixRowWire @[nonToeplitzProcessingElement.scala 481:31]
    io.debugIO.inActAdrIdx <= inActAdrIndexWire @[nonToeplitzProcessingElement.scala 482:28]
    io.debugIO.inActAdrInc <= inActAdrSPadIdxIncWire @[nonToeplitzProcessingElement.scala 483:28]
    io.debugIO.inActDataInc <= inActDataSPadIdxIncWire @[nonToeplitzProcessingElement.scala 484:29]
    io.debugIO.weightMatrixData <= weightMatrixDataReg @[nonToeplitzProcessingElement.scala 485:33]
    io.debugIO.weightMatrixRow <= weightMatrixRowReg @[nonToeplitzProcessingElement.scala 486:32]
    io.debugIO.weightAdrSPadReadOut <= weightAdrDataWire @[nonToeplitzProcessingElement.scala 487:37]
    io.debugIO.productResult <= productReg @[nonToeplitzProcessingElement.scala 488:30]
    io.debugIO.pSumResult <= pSumResultWire @[nonToeplitzProcessingElement.scala 489:27]
    io.debugIO.pSumLoad <= pSumSPadLoadReg @[nonToeplitzProcessingElement.scala 490:25]
    io.debugIO.weightAdrInIdx <= weightAdrSPadReadIdxWire @[nonToeplitzProcessingElement.scala 491:31]
    io.debugIO.sPadState <= PESPadStateReg @[nonToeplitzProcessingElement.scala 492:26]
    io.debugIO.pSumReadIdx <= pSumPadReadIdxReg @[nonToeplitzProcessingElement.scala 493:28]
    io.debugIO.pSumPadReadIdx <= pSumPadReadIdxReg @[nonToeplitzProcessingElement.scala 494:31]
    io.debugIO.inActDataSliding <= currentSliding @[nonToeplitzProcessingElement.scala 495:33]
    io.debugIO.inActDataSlidingFire <= mightInActSlidingIncWire @[nonToeplitzProcessingElement.scala 496:37]
    io.debugIO.futureLBStart <= inActDataSPadModule.io.dataPath.futureLBStart @[nonToeplitzProcessingElement.scala 497:30]
    io.debugIO.inActDataIndex <= inActDataIndexWire @[nonToeplitzProcessingElement.scala 498:31]
    io.debugIO.inActAdrData <= inActAdrData @[nonToeplitzProcessingElement.scala 499:29]
    
  module Queue : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}, count : UInt<3>}
    
    cmem ram : UInt<7>[4] @[Decoupled.scala 209:16]
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 214:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 215:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 215:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 216:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 220:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 221:8]
      _T_5 <= io.enq.bits @[Decoupled.scala 221:24]
      node _T_6 = eq(_T, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 220:17]
    when do_deq : @[Decoupled.scala 224:17]
      node _T_9 = eq(_T_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 224:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 227:16]
    when _T_12 : @[Decoupled.scala 227:28]
      maybe_full <= do_enq @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 231:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 232:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 233:21]
    io.deq.bits <= _T_15 @[Decoupled.scala 233:15]
    when io.enq.valid : @[Decoupled.scala 236:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 236:40]
      skip @[Decoupled.scala 236:25]
    when empty : @[Decoupled.scala 237:18]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 238:19]
      do_deq <= UInt<1>("h00") @[Decoupled.scala 239:14]
      when io.deq.ready : @[Decoupled.scala 240:27]
        do_enq <= UInt<1>("h00") @[Decoupled.scala 240:36]
        skip @[Decoupled.scala 240:27]
      skip @[Decoupled.scala 237:18]
    when io.deq.ready : @[Decoupled.scala 245:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 245:40]
      skip @[Decoupled.scala 245:25]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 248:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 248:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 250:32]
    node _T_18 = mux(_T_17, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 250:62]
    io.count <= _T_19 @[Decoupled.scala 250:14]
    
  module Queue_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}, count : UInt<3>}
    
    cmem ram : UInt<12>[4] @[Decoupled.scala 209:16]
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 214:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 215:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 215:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 216:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 220:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 221:8]
      _T_5 <= io.enq.bits @[Decoupled.scala 221:24]
      node _T_6 = eq(_T, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 220:17]
    when do_deq : @[Decoupled.scala 224:17]
      node _T_9 = eq(_T_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 224:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 227:16]
    when _T_12 : @[Decoupled.scala 227:28]
      maybe_full <= do_enq @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 231:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 232:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 233:21]
    io.deq.bits <= _T_15 @[Decoupled.scala 233:15]
    when io.enq.valid : @[Decoupled.scala 236:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 236:40]
      skip @[Decoupled.scala 236:25]
    when empty : @[Decoupled.scala 237:18]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 238:19]
      do_deq <= UInt<1>("h00") @[Decoupled.scala 239:14]
      when io.deq.ready : @[Decoupled.scala 240:27]
        do_enq <= UInt<1>("h00") @[Decoupled.scala 240:36]
        skip @[Decoupled.scala 240:27]
      skip @[Decoupled.scala 237:18]
    when io.deq.ready : @[Decoupled.scala 245:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 245:40]
      skip @[Decoupled.scala 245:25]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 248:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 248:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 250:32]
    node _T_18 = mux(_T_17, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 250:62]
    io.count <= _T_19 @[Decoupled.scala 250:14]
    
  module Queue_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}, count : UInt<3>}
    
    cmem ram : UInt<7>[4] @[Decoupled.scala 209:16]
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 214:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 215:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 215:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 216:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 220:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 221:8]
      _T_5 <= io.enq.bits @[Decoupled.scala 221:24]
      node _T_6 = eq(_T, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 220:17]
    when do_deq : @[Decoupled.scala 224:17]
      node _T_9 = eq(_T_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 224:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 227:16]
    when _T_12 : @[Decoupled.scala 227:28]
      maybe_full <= do_enq @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 231:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 232:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 233:21]
    io.deq.bits <= _T_15 @[Decoupled.scala 233:15]
    when io.enq.valid : @[Decoupled.scala 236:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 236:40]
      skip @[Decoupled.scala 236:25]
    when empty : @[Decoupled.scala 237:18]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 238:19]
      do_deq <= UInt<1>("h00") @[Decoupled.scala 239:14]
      when io.deq.ready : @[Decoupled.scala 240:27]
        do_enq <= UInt<1>("h00") @[Decoupled.scala 240:36]
        skip @[Decoupled.scala 240:27]
      skip @[Decoupled.scala 237:18]
    when io.deq.ready : @[Decoupled.scala 245:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 245:40]
      skip @[Decoupled.scala 245:25]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 248:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 248:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 250:32]
    node _T_18 = mux(_T_17, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 250:62]
    io.count <= _T_19 @[Decoupled.scala 250:14]
    
  module Queue_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}, count : UInt<3>}
    
    cmem ram : UInt<12>[4] @[Decoupled.scala 209:16]
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 214:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 215:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 215:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 216:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 220:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 221:8]
      _T_5 <= io.enq.bits @[Decoupled.scala 221:24]
      node _T_6 = eq(_T, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 220:17]
    when do_deq : @[Decoupled.scala 224:17]
      node _T_9 = eq(_T_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 224:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 227:16]
    when _T_12 : @[Decoupled.scala 227:28]
      maybe_full <= do_enq @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 231:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 232:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 233:21]
    io.deq.bits <= _T_15 @[Decoupled.scala 233:15]
    when io.enq.valid : @[Decoupled.scala 236:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 236:40]
      skip @[Decoupled.scala 236:25]
    when empty : @[Decoupled.scala 237:18]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 238:19]
      do_deq <= UInt<1>("h00") @[Decoupled.scala 239:14]
      when io.deq.ready : @[Decoupled.scala 240:27]
        do_enq <= UInt<1>("h00") @[Decoupled.scala 240:36]
        skip @[Decoupled.scala 240:27]
      skip @[Decoupled.scala 237:18]
    when io.deq.ready : @[Decoupled.scala 245:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 245:40]
      skip @[Decoupled.scala 245:25]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 248:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 248:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 250:32]
    node _T_18 = mux(_T_17, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 250:62]
    io.count <= _T_19 @[Decoupled.scala 250:14]
    
  module Queue_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, count : UInt<3>}
    
    cmem ram : UInt<21>[4] @[Decoupled.scala 209:16]
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 214:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 215:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 215:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 216:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 220:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 221:8]
      _T_5 <= io.enq.bits @[Decoupled.scala 221:24]
      node _T_6 = eq(_T, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 220:17]
    when do_deq : @[Decoupled.scala 224:17]
      node _T_9 = eq(_T_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 224:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 227:16]
    when _T_12 : @[Decoupled.scala 227:28]
      maybe_full <= do_enq @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 231:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 232:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 233:21]
    io.deq.bits <= _T_15 @[Decoupled.scala 233:15]
    when io.enq.valid : @[Decoupled.scala 236:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 236:40]
      skip @[Decoupled.scala 236:25]
    when empty : @[Decoupled.scala 237:18]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 238:19]
      do_deq <= UInt<1>("h00") @[Decoupled.scala 239:14]
      when io.deq.ready : @[Decoupled.scala 240:27]
        do_enq <= UInt<1>("h00") @[Decoupled.scala 240:36]
        skip @[Decoupled.scala 240:27]
      skip @[Decoupled.scala 237:18]
    when io.deq.ready : @[Decoupled.scala 245:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 245:40]
      skip @[Decoupled.scala 245:25]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 248:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 248:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 250:32]
    node _T_18 = mux(_T_17, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 250:62]
    io.count <= _T_19 @[Decoupled.scala 250:14]
    
  module Queue_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, count : UInt<3>}
    
    cmem ram : UInt<21>[4] @[Decoupled.scala 209:16]
    reg _T : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg _T_1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 212:27]
    node ptr_match = eq(_T, _T_1) @[Decoupled.scala 214:33]
    node _T_2 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 215:28]
    node empty = and(ptr_match, _T_2) @[Decoupled.scala 215:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 216:24]
    node _T_3 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq <= _T_3
    node _T_4 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq <= _T_4
    when do_enq : @[Decoupled.scala 220:17]
      infer mport _T_5 = ram[_T], clock @[Decoupled.scala 221:8]
      _T_5 <= io.enq.bits @[Decoupled.scala 221:24]
      node _T_6 = eq(_T, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_7 = add(_T, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_8 = tail(_T_7, 1) @[Counter.scala 39:22]
      _T <= _T_8 @[Counter.scala 39:13]
      skip @[Decoupled.scala 220:17]
    when do_deq : @[Decoupled.scala 224:17]
      node _T_9 = eq(_T_1, UInt<2>("h03")) @[Counter.scala 38:24]
      node _T_10 = add(_T_1, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_11 = tail(_T_10, 1) @[Counter.scala 39:22]
      _T_1 <= _T_11 @[Counter.scala 39:13]
      skip @[Decoupled.scala 224:17]
    node _T_12 = neq(do_enq, do_deq) @[Decoupled.scala 227:16]
    when _T_12 : @[Decoupled.scala 227:28]
      maybe_full <= do_enq @[Decoupled.scala 228:16]
      skip @[Decoupled.scala 227:28]
    node _T_13 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 231:19]
    io.deq.valid <= _T_13 @[Decoupled.scala 231:16]
    node _T_14 = eq(full, UInt<1>("h00")) @[Decoupled.scala 232:19]
    io.enq.ready <= _T_14 @[Decoupled.scala 232:16]
    infer mport _T_15 = ram[_T_1], clock @[Decoupled.scala 233:21]
    io.deq.bits <= _T_15 @[Decoupled.scala 233:15]
    when io.enq.valid : @[Decoupled.scala 236:25]
      io.deq.valid <= UInt<1>("h01") @[Decoupled.scala 236:40]
      skip @[Decoupled.scala 236:25]
    when empty : @[Decoupled.scala 237:18]
      io.deq.bits <= io.enq.bits @[Decoupled.scala 238:19]
      do_deq <= UInt<1>("h00") @[Decoupled.scala 239:14]
      when io.deq.ready : @[Decoupled.scala 240:27]
        do_enq <= UInt<1>("h00") @[Decoupled.scala 240:36]
        skip @[Decoupled.scala 240:27]
      skip @[Decoupled.scala 237:18]
    when io.deq.ready : @[Decoupled.scala 245:25]
      io.enq.ready <= UInt<1>("h01") @[Decoupled.scala 245:40]
      skip @[Decoupled.scala 245:25]
    node _T_16 = sub(_T, _T_1) @[Decoupled.scala 248:32]
    node ptr_diff = tail(_T_16, 1) @[Decoupled.scala 248:32]
    node _T_17 = and(maybe_full, ptr_match) @[Decoupled.scala 250:32]
    node _T_18 = mux(_T_17, UInt<3>("h04"), UInt<1>("h00")) @[Decoupled.scala 250:20]
    node _T_19 = or(_T_18, ptr_diff) @[Decoupled.scala 250:62]
    io.count <= _T_19 @[Decoupled.scala 250:14]
    
  module nonToeplitzProcessingElement : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dataStream : {flip ipsIO : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, opsIO : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<21>}, flip inActIOs : {adrIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}}, dataIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}, flip weightIOs : {adrIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<7>}}, dataIOs : {data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<12>}}}}, padWF : {inActWriteFin : {adrWriteFin : UInt<1>, dataWriteFin : UInt<1>}, weightWriteFin : {adrWriteFin : UInt<1>, dataWriteFin : UInt<1>}, pSumAddFin : UInt<1>}, topCtrl : {flip pSumEnqEn : UInt<1>, flip doLoadEn : UInt<1>, writeFinish : UInt<1>, calFinish : UInt<1>}, debugIO : {peControlDebugIO : {peState : UInt<2>, doMACEnDebug : UInt<1>}, peSPadDebugIO : {inActMatrixData : UInt<8>, inActMatrixRow : UInt<4>, inActMatrixColumn : UInt<7>, inActAdrInc : UInt<1>, inActDataInc : UInt<1>, inActAdrIdx : UInt<7>, weightAdrSPadReadOut : UInt<7>, weightMatrixData : UInt<8>, weightMatrixRow : UInt<4>, productResult : UInt<21>, pSumResult : UInt<21>, pSumLoad : UInt<21>, weightAdrInIdx : UInt<4>, sPadState : UInt<3>, pSumReadIdx : UInt<5>, pSumPadReadIdx : UInt<5>, inActDataSliding : UInt<1>, inActDataSlidingFire : UInt<1>, futureLBStart : UInt<4>, inActDataIndex : UInt<6>, inActAdrData : UInt<7>}, writeFinishRegVec : UInt<1>[4]}}
    
    inst peCtrlModule of ProcessingElementControl @[nonToeplitzProcessingElement.scala 10:58]
    peCtrlModule.clock <= clock
    peCtrlModule.reset <= reset
    inst nonToeplitzpePadModule of nonToeplitzProcessingElementPad @[nonToeplitzProcessingElement.scala 13:64]
    nonToeplitzpePadModule.clock <= clock
    nonToeplitzpePadModule.reset <= reset
    inst Queue of Queue @[Decoupled.scala 287:21]
    Queue.clock <= clock
    Queue.reset <= reset
    Queue.io.enq.valid <= io.dataStream.inActIOs.adrIOs.data.valid @[Decoupled.scala 288:22]
    Queue.io.enq.bits <= io.dataStream.inActIOs.adrIOs.data.bits @[Decoupled.scala 289:21]
    io.dataStream.inActIOs.adrIOs.data.ready <= Queue.io.enq.ready @[Decoupled.scala 290:17]
    nonToeplitzpePadModule.io.dataStream.inActIOs.adrIOs.data.bits <= Queue.io.deq.bits @[nonToeplitzProcessingElement.scala 19:45]
    nonToeplitzpePadModule.io.dataStream.inActIOs.adrIOs.data.valid <= Queue.io.deq.valid @[nonToeplitzProcessingElement.scala 19:45]
    Queue.io.deq.ready <= nonToeplitzpePadModule.io.dataStream.inActIOs.adrIOs.data.ready @[nonToeplitzProcessingElement.scala 19:45]
    inst Queue_1 of Queue_1 @[Decoupled.scala 287:21]
    Queue_1.clock <= clock
    Queue_1.reset <= reset
    Queue_1.io.enq.valid <= io.dataStream.inActIOs.dataIOs.data.valid @[Decoupled.scala 288:22]
    Queue_1.io.enq.bits <= io.dataStream.inActIOs.dataIOs.data.bits @[Decoupled.scala 289:21]
    io.dataStream.inActIOs.dataIOs.data.ready <= Queue_1.io.enq.ready @[Decoupled.scala 290:17]
    nonToeplitzpePadModule.io.dataStream.inActIOs.dataIOs.data.bits <= Queue_1.io.deq.bits @[nonToeplitzProcessingElement.scala 20:46]
    nonToeplitzpePadModule.io.dataStream.inActIOs.dataIOs.data.valid <= Queue_1.io.deq.valid @[nonToeplitzProcessingElement.scala 20:46]
    Queue_1.io.deq.ready <= nonToeplitzpePadModule.io.dataStream.inActIOs.dataIOs.data.ready @[nonToeplitzProcessingElement.scala 20:46]
    inst Queue_2 of Queue_2 @[Decoupled.scala 287:21]
    Queue_2.clock <= clock
    Queue_2.reset <= reset
    Queue_2.io.enq.valid <= io.dataStream.weightIOs.adrIOs.data.valid @[Decoupled.scala 288:22]
    Queue_2.io.enq.bits <= io.dataStream.weightIOs.adrIOs.data.bits @[Decoupled.scala 289:21]
    io.dataStream.weightIOs.adrIOs.data.ready <= Queue_2.io.enq.ready @[Decoupled.scala 290:17]
    nonToeplitzpePadModule.io.dataStream.weightIOs.adrIOs.data.bits <= Queue_2.io.deq.bits @[nonToeplitzProcessingElement.scala 21:46]
    nonToeplitzpePadModule.io.dataStream.weightIOs.adrIOs.data.valid <= Queue_2.io.deq.valid @[nonToeplitzProcessingElement.scala 21:46]
    Queue_2.io.deq.ready <= nonToeplitzpePadModule.io.dataStream.weightIOs.adrIOs.data.ready @[nonToeplitzProcessingElement.scala 21:46]
    inst Queue_3 of Queue_3 @[Decoupled.scala 287:21]
    Queue_3.clock <= clock
    Queue_3.reset <= reset
    Queue_3.io.enq.valid <= io.dataStream.weightIOs.dataIOs.data.valid @[Decoupled.scala 288:22]
    Queue_3.io.enq.bits <= io.dataStream.weightIOs.dataIOs.data.bits @[Decoupled.scala 289:21]
    io.dataStream.weightIOs.dataIOs.data.ready <= Queue_3.io.enq.ready @[Decoupled.scala 290:17]
    nonToeplitzpePadModule.io.dataStream.weightIOs.dataIOs.data.bits <= Queue_3.io.deq.bits @[nonToeplitzProcessingElement.scala 22:47]
    nonToeplitzpePadModule.io.dataStream.weightIOs.dataIOs.data.valid <= Queue_3.io.deq.valid @[nonToeplitzProcessingElement.scala 22:47]
    Queue_3.io.deq.ready <= nonToeplitzpePadModule.io.dataStream.weightIOs.dataIOs.data.ready @[nonToeplitzProcessingElement.scala 22:47]
    io.padWF.inActWriteFin.dataWriteFin <= nonToeplitzpePadModule.io.padWF.inActWriteFin.dataWriteFin @[nonToeplitzProcessingElement.scala 29:76]
    io.padWF.inActWriteFin.adrWriteFin <= nonToeplitzpePadModule.io.padWF.inActWriteFin.adrWriteFin @[nonToeplitzProcessingElement.scala 29:76]
    io.padWF.weightWriteFin.dataWriteFin <= nonToeplitzpePadModule.io.padWF.weightWriteFin.dataWriteFin @[nonToeplitzProcessingElement.scala 29:76]
    io.padWF.weightWriteFin.adrWriteFin <= nonToeplitzpePadModule.io.padWF.weightWriteFin.adrWriteFin @[nonToeplitzProcessingElement.scala 29:76]
    io.padWF.pSumAddFin <= nonToeplitzpePadModule.io.padWF.pSumAddFin @[nonToeplitzProcessingElement.scala 30:23]
    peCtrlModule.io.ctrlPad.fromTopIO.calFinish <= nonToeplitzpePadModule.io.padCtrl.fromTopIO.calFinish @[nonToeplitzProcessingElement.scala 31:20]
    peCtrlModule.io.ctrlPad.fromTopIO.writeFinish <= nonToeplitzpePadModule.io.padCtrl.fromTopIO.writeFinish @[nonToeplitzProcessingElement.scala 31:20]
    nonToeplitzpePadModule.io.padCtrl.fromTopIO.doLoadEn <= peCtrlModule.io.ctrlPad.fromTopIO.doLoadEn @[nonToeplitzProcessingElement.scala 31:20]
    nonToeplitzpePadModule.io.padCtrl.fromTopIO.pSumEnqEn <= peCtrlModule.io.ctrlPad.fromTopIO.pSumEnqEn @[nonToeplitzProcessingElement.scala 31:20]
    nonToeplitzpePadModule.io.padCtrl.doMACEn <= peCtrlModule.io.ctrlPad.doMACEn @[nonToeplitzProcessingElement.scala 31:20]
    peCtrlModule.io.ctrlTop.pSumEnqEn <= io.topCtrl.pSumEnqEn @[nonToeplitzProcessingElement.scala 32:30]
    io.topCtrl.calFinish <= peCtrlModule.io.ctrlTop.calFinish @[nonToeplitzProcessingElement.scala 33:24]
    peCtrlModule.io.ctrlTop.doLoadEn <= io.topCtrl.doLoadEn @[nonToeplitzProcessingElement.scala 34:29]
    wire inActAndWeightWFWire : UInt<1> @[nonToeplitzProcessingElement.scala 37:45]
    reg inActAdrWFReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 39:82]
    reg inActDataWFReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 39:82]
    reg weightAdrWFReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 39:82]
    reg weightDataWFReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[nonToeplitzProcessingElement.scala 39:82]
    node _T = mux(nonToeplitzpePadModule.io.padWF.inActWriteFin.adrWriteFin, UInt<1>("h01"), inActAdrWFReg) @[nonToeplitzProcessingElement.scala 45:62]
    node _T_1 = mux(inActAndWeightWFWire, UInt<1>("h00"), _T) @[nonToeplitzProcessingElement.scala 45:32]
    inActAdrWFReg <= _T_1 @[nonToeplitzProcessingElement.scala 45:26]
    node _T_2 = mux(nonToeplitzpePadModule.io.padWF.inActWriteFin.dataWriteFin, UInt<1>("h01"), inActDataWFReg) @[nonToeplitzProcessingElement.scala 45:62]
    node _T_3 = mux(inActAndWeightWFWire, UInt<1>("h00"), _T_2) @[nonToeplitzProcessingElement.scala 45:32]
    inActDataWFReg <= _T_3 @[nonToeplitzProcessingElement.scala 45:26]
    node _T_4 = mux(nonToeplitzpePadModule.io.padWF.weightWriteFin.adrWriteFin, UInt<1>("h01"), weightAdrWFReg) @[nonToeplitzProcessingElement.scala 45:62]
    node _T_5 = mux(inActAndWeightWFWire, UInt<1>("h00"), _T_4) @[nonToeplitzProcessingElement.scala 45:32]
    weightAdrWFReg <= _T_5 @[nonToeplitzProcessingElement.scala 45:26]
    node _T_6 = mux(nonToeplitzpePadModule.io.padWF.weightWriteFin.dataWriteFin, UInt<1>("h01"), weightDataWFReg) @[nonToeplitzProcessingElement.scala 45:62]
    node _T_7 = mux(inActAndWeightWFWire, UInt<1>("h00"), _T_6) @[nonToeplitzProcessingElement.scala 45:32]
    weightDataWFReg <= _T_7 @[nonToeplitzProcessingElement.scala 45:26]
    node _T_8 = and(inActAdrWFReg, inActDataWFReg) @[nonToeplitzProcessingElement.scala 47:49]
    node _T_9 = and(_T_8, weightAdrWFReg) @[nonToeplitzProcessingElement.scala 47:49]
    node _T_10 = and(_T_9, weightDataWFReg) @[nonToeplitzProcessingElement.scala 47:49]
    inActAndWeightWFWire <= _T_10 @[nonToeplitzProcessingElement.scala 47:19]
    io.topCtrl.writeFinish <= inActAndWeightWFWire @[nonToeplitzProcessingElement.scala 48:26]
    peCtrlModule.io.ctrlTop.writeFinish <= inActAndWeightWFWire @[nonToeplitzProcessingElement.scala 49:32]
    inst Queue_4 of Queue_4 @[Decoupled.scala 287:21]
    Queue_4.clock <= clock
    Queue_4.reset <= reset
    Queue_4.io.enq.valid <= io.dataStream.ipsIO.valid @[Decoupled.scala 288:22]
    Queue_4.io.enq.bits <= io.dataStream.ipsIO.bits @[Decoupled.scala 289:21]
    io.dataStream.ipsIO.ready <= Queue_4.io.enq.ready @[Decoupled.scala 290:17]
    nonToeplitzpePadModule.io.dataStream.ipsIO.bits <= Queue_4.io.deq.bits @[nonToeplitzProcessingElement.scala 51:28]
    nonToeplitzpePadModule.io.dataStream.ipsIO.valid <= Queue_4.io.deq.valid @[nonToeplitzProcessingElement.scala 51:28]
    Queue_4.io.deq.ready <= nonToeplitzpePadModule.io.dataStream.ipsIO.ready @[nonToeplitzProcessingElement.scala 51:28]
    inst Queue_5 of Queue_5 @[Decoupled.scala 287:21]
    Queue_5.clock <= clock
    Queue_5.reset <= reset
    Queue_5.io.enq.valid <= nonToeplitzpePadModule.io.dataStream.opsIO.valid @[Decoupled.scala 288:22]
    Queue_5.io.enq.bits <= nonToeplitzpePadModule.io.dataStream.opsIO.bits @[Decoupled.scala 289:21]
    nonToeplitzpePadModule.io.dataStream.opsIO.ready <= Queue_5.io.enq.ready @[Decoupled.scala 290:17]
    io.dataStream.opsIO.bits <= Queue_5.io.deq.bits @[nonToeplitzProcessingElement.scala 52:23]
    io.dataStream.opsIO.valid <= Queue_5.io.deq.valid @[nonToeplitzProcessingElement.scala 52:23]
    Queue_5.io.deq.ready <= io.dataStream.opsIO.ready @[nonToeplitzProcessingElement.scala 52:23]
    io.debugIO.peControlDebugIO.doMACEnDebug <= peCtrlModule.io.debugIO.doMACEnDebug @[nonToeplitzProcessingElement.scala 54:33]
    io.debugIO.peControlDebugIO.peState <= peCtrlModule.io.debugIO.peState @[nonToeplitzProcessingElement.scala 54:33]
    io.debugIO.peSPadDebugIO.inActAdrData <= nonToeplitzpePadModule.io.debugIO.inActAdrData @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActDataIndex <= nonToeplitzpePadModule.io.debugIO.inActDataIndex @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.futureLBStart <= nonToeplitzpePadModule.io.debugIO.futureLBStart @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActDataSlidingFire <= nonToeplitzpePadModule.io.debugIO.inActDataSlidingFire @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActDataSliding <= nonToeplitzpePadModule.io.debugIO.inActDataSliding @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.pSumPadReadIdx <= nonToeplitzpePadModule.io.debugIO.pSumPadReadIdx @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.pSumReadIdx <= nonToeplitzpePadModule.io.debugIO.pSumReadIdx @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.sPadState <= nonToeplitzpePadModule.io.debugIO.sPadState @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.weightAdrInIdx <= nonToeplitzpePadModule.io.debugIO.weightAdrInIdx @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.pSumLoad <= nonToeplitzpePadModule.io.debugIO.pSumLoad @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.pSumResult <= nonToeplitzpePadModule.io.debugIO.pSumResult @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.productResult <= nonToeplitzpePadModule.io.debugIO.productResult @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.weightMatrixRow <= nonToeplitzpePadModule.io.debugIO.weightMatrixRow @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.weightMatrixData <= nonToeplitzpePadModule.io.debugIO.weightMatrixData @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.weightAdrSPadReadOut <= nonToeplitzpePadModule.io.debugIO.weightAdrSPadReadOut @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActAdrIdx <= nonToeplitzpePadModule.io.debugIO.inActAdrIdx @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActDataInc <= nonToeplitzpePadModule.io.debugIO.inActDataInc @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActAdrInc <= nonToeplitzpePadModule.io.debugIO.inActAdrInc @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActMatrixColumn <= nonToeplitzpePadModule.io.debugIO.inActMatrixColumn @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActMatrixRow <= nonToeplitzpePadModule.io.debugIO.inActMatrixRow @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.peSPadDebugIO.inActMatrixData <= nonToeplitzpePadModule.io.debugIO.inActMatrixData @[nonToeplitzProcessingElement.scala 55:30]
    io.debugIO.writeFinishRegVec[0] <= inActAdrWFReg @[nonToeplitzProcessingElement.scala 56:34]
    io.debugIO.writeFinishRegVec[1] <= inActDataWFReg @[nonToeplitzProcessingElement.scala 56:34]
    io.debugIO.writeFinishRegVec[2] <= weightAdrWFReg @[nonToeplitzProcessingElement.scala 56:34]
    io.debugIO.writeFinishRegVec[3] <= weightDataWFReg @[nonToeplitzProcessingElement.scala 56:34]
    
